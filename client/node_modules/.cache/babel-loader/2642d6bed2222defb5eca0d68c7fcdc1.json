{"ast":null,"code":"import { Konva } from './Global.js';\nimport { Util } from './Util.js';\nexport const DD = {\n  get isDragging() {\n    var flag = false;\n\n    DD._dragElements.forEach(elem => {\n      if (elem.dragStatus === 'dragging') {\n        flag = true;\n      }\n    });\n\n    return flag;\n  },\n\n  justDragged: false,\n\n  get node() {\n    var node;\n\n    DD._dragElements.forEach(elem => {\n      node = elem.node;\n    });\n\n    return node;\n  },\n\n  _dragElements: new Map(),\n\n  _drag(evt) {\n    const nodesToFireEvents = [];\n\n    DD._dragElements.forEach((elem, key) => {\n      const {\n        node\n      } = elem;\n      const stage = node.getStage();\n      stage.setPointersPositions(evt);\n\n      if (elem.pointerId === undefined) {\n        elem.pointerId = Util._getFirstPointerId(evt);\n      }\n\n      const pos = stage._changedPointerPositions.find(pos => pos.id === elem.pointerId);\n\n      if (!pos) {\n        return;\n      }\n\n      if (elem.dragStatus !== 'dragging') {\n        var dragDistance = node.dragDistance();\n        var distance = Math.max(Math.abs(pos.x - elem.startPointerPos.x), Math.abs(pos.y - elem.startPointerPos.y));\n\n        if (distance < dragDistance) {\n          return;\n        }\n\n        node.startDrag({\n          evt\n        });\n\n        if (!node.isDragging()) {\n          return;\n        }\n      }\n\n      node._setDragPosition(evt, elem);\n\n      nodesToFireEvents.push(node);\n    });\n\n    nodesToFireEvents.forEach(node => {\n      node.fire('dragmove', {\n        type: 'dragmove',\n        target: node,\n        evt: evt\n      }, true);\n    });\n  },\n\n  _endDragBefore(evt) {\n    DD._dragElements.forEach(elem => {\n      const {\n        node\n      } = elem;\n      const stage = node.getStage();\n\n      if (evt) {\n        stage.setPointersPositions(evt);\n      }\n\n      const pos = stage._changedPointerPositions.find(pos => pos.id === elem.pointerId);\n\n      if (!pos) {\n        return;\n      }\n\n      if (elem.dragStatus === 'dragging' || elem.dragStatus === 'stopped') {\n        DD.justDragged = true;\n        Konva._mouseListenClick = false;\n        Konva._touchListenClick = false;\n        Konva._pointerListenClick = false;\n        elem.dragStatus = 'stopped';\n      }\n\n      const drawNode = elem.node.getLayer() || elem.node instanceof Konva['Stage'] && elem.node;\n\n      if (drawNode) {\n        drawNode.batchDraw();\n      }\n    });\n  },\n\n  _endDragAfter(evt) {\n    DD._dragElements.forEach((elem, key) => {\n      if (elem.dragStatus === 'stopped') {\n        elem.node.fire('dragend', {\n          type: 'dragend',\n          target: elem.node,\n          evt: evt\n        }, true);\n      }\n\n      if (elem.dragStatus !== 'dragging') {\n        DD._dragElements.delete(key);\n      }\n    });\n  }\n\n};\n\nif (Konva.isBrowser) {\n  window.addEventListener('mouseup', DD._endDragBefore, true);\n  window.addEventListener('touchend', DD._endDragBefore, true);\n  window.addEventListener('mousemove', DD._drag);\n  window.addEventListener('touchmove', DD._drag);\n  window.addEventListener('mouseup', DD._endDragAfter, false);\n  window.addEventListener('touchend', DD._endDragAfter, false);\n}","map":{"version":3,"sources":["/Users/stevec/Codeclan_Work/Group_Project/SnakesAndLadders/client/node_modules/konva/lib/DragAndDrop.js"],"names":["Konva","Util","DD","isDragging","flag","_dragElements","forEach","elem","dragStatus","justDragged","node","Map","_drag","evt","nodesToFireEvents","key","stage","getStage","setPointersPositions","pointerId","undefined","_getFirstPointerId","pos","_changedPointerPositions","find","id","dragDistance","distance","Math","max","abs","x","startPointerPos","y","startDrag","_setDragPosition","push","fire","type","target","_endDragBefore","_mouseListenClick","_touchListenClick","_pointerListenClick","drawNode","getLayer","batchDraw","_endDragAfter","delete","isBrowser","window","addEventListener"],"mappings":"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","sourcesContent":["import { Konva } from './Global.js';\nimport { Util } from './Util.js';\nexport const DD = {\n    get isDragging() {\n        var flag = false;\n        DD._dragElements.forEach((elem) => {\n            if (elem.dragStatus === 'dragging') {\n                flag = true;\n            }\n        });\n        return flag;\n    },\n    justDragged: false,\n    get node() {\n        var node;\n        DD._dragElements.forEach((elem) => {\n            node = elem.node;\n        });\n        return node;\n    },\n    _dragElements: new Map(),\n    _drag(evt) {\n        const nodesToFireEvents = [];\n        DD._dragElements.forEach((elem, key) => {\n            const { node } = elem;\n            const stage = node.getStage();\n            stage.setPointersPositions(evt);\n            if (elem.pointerId === undefined) {\n                elem.pointerId = Util._getFirstPointerId(evt);\n            }\n            const pos = stage._changedPointerPositions.find((pos) => pos.id === elem.pointerId);\n            if (!pos) {\n                return;\n            }\n            if (elem.dragStatus !== 'dragging') {\n                var dragDistance = node.dragDistance();\n                var distance = Math.max(Math.abs(pos.x - elem.startPointerPos.x), Math.abs(pos.y - elem.startPointerPos.y));\n                if (distance < dragDistance) {\n                    return;\n                }\n                node.startDrag({ evt });\n                if (!node.isDragging()) {\n                    return;\n                }\n            }\n            node._setDragPosition(evt, elem);\n            nodesToFireEvents.push(node);\n        });\n        nodesToFireEvents.forEach((node) => {\n            node.fire('dragmove', {\n                type: 'dragmove',\n                target: node,\n                evt: evt,\n            }, true);\n        });\n    },\n    _endDragBefore(evt) {\n        DD._dragElements.forEach((elem) => {\n            const { node } = elem;\n            const stage = node.getStage();\n            if (evt) {\n                stage.setPointersPositions(evt);\n            }\n            const pos = stage._changedPointerPositions.find((pos) => pos.id === elem.pointerId);\n            if (!pos) {\n                return;\n            }\n            if (elem.dragStatus === 'dragging' || elem.dragStatus === 'stopped') {\n                DD.justDragged = true;\n                Konva._mouseListenClick = false;\n                Konva._touchListenClick = false;\n                Konva._pointerListenClick = false;\n                elem.dragStatus = 'stopped';\n            }\n            const drawNode = elem.node.getLayer() ||\n                (elem.node instanceof Konva['Stage'] && elem.node);\n            if (drawNode) {\n                drawNode.batchDraw();\n            }\n        });\n    },\n    _endDragAfter(evt) {\n        DD._dragElements.forEach((elem, key) => {\n            if (elem.dragStatus === 'stopped') {\n                elem.node.fire('dragend', {\n                    type: 'dragend',\n                    target: elem.node,\n                    evt: evt,\n                }, true);\n            }\n            if (elem.dragStatus !== 'dragging') {\n                DD._dragElements.delete(key);\n            }\n        });\n    },\n};\nif (Konva.isBrowser) {\n    window.addEventListener('mouseup', DD._endDragBefore, true);\n    window.addEventListener('touchend', DD._endDragBefore, true);\n    window.addEventListener('mousemove', DD._drag);\n    window.addEventListener('touchmove', DD._drag);\n    window.addEventListener('mouseup', DD._endDragAfter, false);\n    window.addEventListener('touchend', DD._endDragAfter, false);\n}\n"]},"metadata":{},"sourceType":"module"}