{"ast":null,"code":"import { Factory } from '../Factory.js';\nimport { Node } from '../Node.js';\nimport { RGBComponent } from '../Validators.js';\nexport const RGB = function (imageData) {\n  var data = imageData.data,\n      nPixels = data.length,\n      red = this.red(),\n      green = this.green(),\n      blue = this.blue(),\n      i,\n      brightness;\n\n  for (i = 0; i < nPixels; i += 4) {\n    brightness = (0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2]) / 255;\n    data[i] = brightness * red;\n    data[i + 1] = brightness * green;\n    data[i + 2] = brightness * blue;\n    data[i + 3] = data[i + 3];\n  }\n};\nFactory.addGetterSetter(Node, 'red', 0, function (val) {\n  this._filterUpToDate = false;\n\n  if (val > 255) {\n    return 255;\n  } else if (val < 0) {\n    return 0;\n  } else {\n    return Math.round(val);\n  }\n});\nFactory.addGetterSetter(Node, 'green', 0, function (val) {\n  this._filterUpToDate = false;\n\n  if (val > 255) {\n    return 255;\n  } else if (val < 0) {\n    return 0;\n  } else {\n    return Math.round(val);\n  }\n});\nFactory.addGetterSetter(Node, 'blue', 0, RGBComponent, Factory.afterSetFilter);","map":{"version":3,"sources":["/Users/stevec/Codeclan_Work/Group_Project/SnakesAndLadders/client/node_modules/konva/lib/filters/RGB.js"],"names":["Factory","Node","RGBComponent","RGB","imageData","data","nPixels","length","red","green","blue","i","brightness","addGetterSetter","val","_filterUpToDate","Math","round","afterSetFilter"],"mappings":"AAAA,SAASA,OAAT,QAAwB,eAAxB;AACA,SAASC,IAAT,QAAqB,YAArB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAO,MAAMC,GAAG,GAAG,UAAUC,SAAV,EAAqB;AACpC,MAAIC,IAAI,GAAGD,SAAS,CAACC,IAArB;AAAA,MAA2BC,OAAO,GAAGD,IAAI,CAACE,MAA1C;AAAA,MAAkDC,GAAG,GAAG,KAAKA,GAAL,EAAxD;AAAA,MAAoEC,KAAK,GAAG,KAAKA,KAAL,EAA5E;AAAA,MAA0FC,IAAI,GAAG,KAAKA,IAAL,EAAjG;AAAA,MAA8GC,CAA9G;AAAA,MAAiHC,UAAjH;;AACA,OAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGL,OAAhB,EAAyBK,CAAC,IAAI,CAA9B,EAAiC;AAC7BC,IAAAA,UAAU,GACN,CAAC,OAAOP,IAAI,CAACM,CAAD,CAAX,GAAiB,MAAMN,IAAI,CAACM,CAAC,GAAG,CAAL,CAA3B,GAAqC,OAAON,IAAI,CAACM,CAAC,GAAG,CAAL,CAAjD,IAA4D,GADhE;AAEAN,IAAAA,IAAI,CAACM,CAAD,CAAJ,GAAUC,UAAU,GAAGJ,GAAvB;AACAH,IAAAA,IAAI,CAACM,CAAC,GAAG,CAAL,CAAJ,GAAcC,UAAU,GAAGH,KAA3B;AACAJ,IAAAA,IAAI,CAACM,CAAC,GAAG,CAAL,CAAJ,GAAcC,UAAU,GAAGF,IAA3B;AACAL,IAAAA,IAAI,CAACM,CAAC,GAAG,CAAL,CAAJ,GAAcN,IAAI,CAACM,CAAC,GAAG,CAAL,CAAlB;AACH;AACJ,CAVM;AAWPX,OAAO,CAACa,eAAR,CAAwBZ,IAAxB,EAA8B,KAA9B,EAAqC,CAArC,EAAwC,UAAUa,GAAV,EAAe;AACnD,OAAKC,eAAL,GAAuB,KAAvB;;AACA,MAAID,GAAG,GAAG,GAAV,EAAe;AACX,WAAO,GAAP;AACH,GAFD,MAGK,IAAIA,GAAG,GAAG,CAAV,EAAa;AACd,WAAO,CAAP;AACH,GAFI,MAGA;AACD,WAAOE,IAAI,CAACC,KAAL,CAAWH,GAAX,CAAP;AACH;AACJ,CAXD;AAYAd,OAAO,CAACa,eAAR,CAAwBZ,IAAxB,EAA8B,OAA9B,EAAuC,CAAvC,EAA0C,UAAUa,GAAV,EAAe;AACrD,OAAKC,eAAL,GAAuB,KAAvB;;AACA,MAAID,GAAG,GAAG,GAAV,EAAe;AACX,WAAO,GAAP;AACH,GAFD,MAGK,IAAIA,GAAG,GAAG,CAAV,EAAa;AACd,WAAO,CAAP;AACH,GAFI,MAGA;AACD,WAAOE,IAAI,CAACC,KAAL,CAAWH,GAAX,CAAP;AACH;AACJ,CAXD;AAYAd,OAAO,CAACa,eAAR,CAAwBZ,IAAxB,EAA8B,MAA9B,EAAsC,CAAtC,EAAyCC,YAAzC,EAAuDF,OAAO,CAACkB,cAA/D","sourcesContent":["import { Factory } from '../Factory.js';\nimport { Node } from '../Node.js';\nimport { RGBComponent } from '../Validators.js';\nexport const RGB = function (imageData) {\n    var data = imageData.data, nPixels = data.length, red = this.red(), green = this.green(), blue = this.blue(), i, brightness;\n    for (i = 0; i < nPixels; i += 4) {\n        brightness =\n            (0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2]) / 255;\n        data[i] = brightness * red;\n        data[i + 1] = brightness * green;\n        data[i + 2] = brightness * blue;\n        data[i + 3] = data[i + 3];\n    }\n};\nFactory.addGetterSetter(Node, 'red', 0, function (val) {\n    this._filterUpToDate = false;\n    if (val > 255) {\n        return 255;\n    }\n    else if (val < 0) {\n        return 0;\n    }\n    else {\n        return Math.round(val);\n    }\n});\nFactory.addGetterSetter(Node, 'green', 0, function (val) {\n    this._filterUpToDate = false;\n    if (val > 255) {\n        return 255;\n    }\n    else if (val < 0) {\n        return 0;\n    }\n    else {\n        return Math.round(val);\n    }\n});\nFactory.addGetterSetter(Node, 'blue', 0, RGBComponent, Factory.afterSetFilter);\n"]},"metadata":{},"sourceType":"module"}