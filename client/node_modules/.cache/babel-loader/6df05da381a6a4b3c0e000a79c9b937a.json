{"ast":null,"code":"var _jsxFileName = \"/Users/stevec/Codeclan_Work/Group_Project/SnakesAndLadders/client/src/components/Canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Canvas = props => {\n  _s();\n\n  const width = 500;\n  const height = 500;\n  const numCol = 10;\n  const numRow = 10;\n  const tileSize = 50;\n  let yAxis = (numRow - 1) * tileSize;\n  let xAxis = 0;\n  let board = [];\n  let direction = 1;\n  const canvasRef = useRef([]);\n\n  const draw = ctx => {\n    for (let index = 0; index < numRow * numRow; index++) {\n      // add each tile to the array\n      board.push({\n        xAxis,\n        yAxis,\n        tileSize,\n        index\n      });\n      xAxis = xAxis + tileSize * direction; // reverse direction after 10th tile and move up 1 tile\n\n      if (xAxis >= width || xAxis <= -tileSize) {\n        direction *= -1;\n        xAxis += tileSize * direction;\n        yAxis -= tileSize;\n      }\n\n      for (x = 0; x <= w; x += 20) {\n        for (y = 0; y <= h; y += 20) {\n          ctx.moveTo(x, 0);\n          ctx.lineTo(x, h);\n          ctx.stroke();\n          ctx.moveTo(0, y);\n          ctx.lineTo(w, y);\n          ctx.stroke();\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d'); //Our first draw\n\n    draw(context); // context.fillStyle = '#ebebeb'\n    // context.fillRect(0, 0, context.canvas.width, context.canvas.height)\n  }, [draw]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Canvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/stevec/Codeclan_Work/Group_Project/SnakesAndLadders/client/src/components/Canvas.js"],"names":["React","useRef","useEffect","Canvas","props","width","height","numCol","numRow","tileSize","yAxis","xAxis","board","direction","canvasRef","draw","ctx","index","push","x","w","y","h","moveTo","lineTo","stroke","canvas","current","context","getContext"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;;;AAEA,MAAMC,MAAM,GAAGC,KAAK,IAAI;AAAA;;AAEpB,QAAMC,KAAK,GAAG,GAAd;AACA,QAAMC,MAAM,GAAG,GAAf;AACA,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,QAAQ,GAAG,EAAjB;AACA,MAAIC,KAAK,GAAG,CAACF,MAAM,GAAG,CAAV,IAAeC,QAA3B;AACA,MAAIE,KAAK,GAAG,CAAZ;AACA,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,QAAMC,SAAS,GAAGb,MAAM,CAAC,EAAD,CAAxB;;AAEA,QAAMc,IAAI,GAAGC,GAAG,IAAI;AAChB,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGT,MAAM,GAAGA,MAArC,EAA6CS,KAAK,EAAlD,EAAsD;AACtD;AACAL,MAAAA,KAAK,CAACM,IAAN,CAAW;AAAEP,QAAAA,KAAF;AAASD,QAAAA,KAAT;AAAgBD,QAAAA,QAAhB;AAA0BQ,QAAAA;AAA1B,OAAX;AACAN,MAAAA,KAAK,GAAGA,KAAK,GAAGF,QAAQ,GAAGI,SAA3B,CAHsD,CAItD;;AACA,UAAIF,KAAK,IAAIN,KAAT,IAAkBM,KAAK,IAAI,CAACF,QAAhC,EAA0C;AACtCI,QAAAA,SAAS,IAAI,CAAC,CAAd;AACAF,QAAAA,KAAK,IAAIF,QAAQ,GAAGI,SAApB;AACAH,QAAAA,KAAK,IAAID,QAAT;AACH;;AAED,WAAKU,CAAC,GAAC,CAAP,EAASA,CAAC,IAAEC,CAAZ,EAAcD,CAAC,IAAE,EAAjB,EAAqB;AACjB,aAAKE,CAAC,GAAC,CAAP,EAASA,CAAC,IAAEC,CAAZ,EAAcD,CAAC,IAAE,EAAjB,EAAqB;AACjBL,UAAAA,GAAG,CAACO,MAAJ,CAAWJ,CAAX,EAAc,CAAd;AACAH,UAAAA,GAAG,CAACQ,MAAJ,CAAWL,CAAX,EAAcG,CAAd;AACAN,UAAAA,GAAG,CAACS,MAAJ;AACAT,UAAAA,GAAG,CAACO,MAAJ,CAAW,CAAX,EAAcF,CAAd;AACAL,UAAAA,GAAG,CAACQ,MAAJ,CAAWJ,CAAX,EAAcC,CAAd;AACAL,UAAAA,GAAG,CAACS,MAAJ;AACH;AACJ;AACA;AACJ,GAvBD;;AA0BAvB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMwB,MAAM,GAAGZ,SAAS,CAACa,OAAzB;AACA,UAAMC,OAAO,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAhB,CAFY,CAGZ;;AACAd,IAAAA,IAAI,CAACa,OAAD,CAAJ,CAJY,CAKZ;AACA;AACH,GAPQ,EAON,CAACb,IAAD,CAPM,CAAT;AASA,sBAAO;AAAQ,IAAA,GAAG,EAAED,SAAb;AAAA,OAA4BV;AAA5B;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAjDD;;GAAMD,M;;KAAAA,M;AAmDN,eAAeA,MAAf","sourcesContent":["import React, { useRef, useEffect } from 'react'\n\nconst Canvas = props => {\n\n    const width = 500;\n    const height = 500;\n    const numCol = 10;\n    const numRow = 10;\n    const tileSize = 50;\n    let yAxis = (numRow - 1) * tileSize;\n    let xAxis = 0;\n    let board = [];\n    let direction = 1;\n    const canvasRef = useRef([])\n\n    const draw = ctx => {\n        for (let index = 0; index < numRow * numRow; index++) {\n        // add each tile to the array\n        board.push({ xAxis, yAxis, tileSize, index });\n        xAxis = xAxis + tileSize * direction;\n        // reverse direction after 10th tile and move up 1 tile\n        if (xAxis >= width || xAxis <= -tileSize) {\n            direction *= -1;\n            xAxis += tileSize * direction;\n            yAxis -= tileSize\n        }\n   \n        for (x=0;x<=w;x+=20) {\n            for (y=0;y<=h;y+=20) {\n                ctx.moveTo(x, 0);\n                ctx.lineTo(x, h);\n                ctx.stroke();\n                ctx.moveTo(0, y);\n                ctx.lineTo(w, y);\n                ctx.stroke();\n            }\n        }\n        }\n    }\n\n    \n    useEffect(() => {\n        const canvas = canvasRef.current\n        const context = canvas.getContext('2d')\n        //Our first draw\n        draw(context)\n        // context.fillStyle = '#ebebeb'\n        // context.fillRect(0, 0, context.canvas.width, context.canvas.height)\n    }, [draw])\n\n    return <canvas ref={canvasRef} {...props} />\n}\n\nexport default Canvas"]},"metadata":{},"sourceType":"module"}