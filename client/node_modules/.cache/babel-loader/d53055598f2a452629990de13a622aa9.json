{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/week_08/project_two/SnakesAndLadders/client/src/containers/game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport GameBoard from '../components/GameBoard';\nimport Players from '../components/Players';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Game = () => {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [playerRoll, setPlayerRoll] = useState();\n  const boardSize = 750;\n  const tiles = 10;\n  const tileSize = 75;\n  let yAxis = (tiles - 1) * tileSize;\n  let xAxis = 0;\n  let board = [];\n  let direction = 1;\n  let roll = 0;\n\n  for (let index = 0; index < tiles * tiles; index++) {\n    // add each tile to the array\n    board.push({\n      xAxis,\n      yAxis,\n      tileSize,\n      index\n    });\n    xAxis = xAxis + tileSize * direction; // reverse direction after 10th tile and move up 1 tile\n\n    if (xAxis >= boardSize || xAxis <= -tileSize) {\n      direction *= -1;\n      xAxis += tileSize * direction;\n      yAxis -= tileSize;\n    }\n  }\n\n  console.log(board[10]);\n  let players = [];\n\n  const rollDice = () => {\n    const max = 6;\n    let newroll = Math.ceil(Math.random() * max);\n    roll += newroll;\n    console.log(roll);\n    console.log(newroll);\n    player_1.xAxis = board[roll].xAxis;\n    player_1.yAxis = board[roll].yAxis;\n    console.log(player_1.xAxis);\n    console.log(player_1.yAxis);\n    setPlayerRoll(newroll);\n  };\n\n  let player_1 = {\n    xAxis: board[roll].xAxis,\n    yAxis: board[roll].yAxis,\n    index: 1\n  };\n  players.push(player_1);\n  useEffect(() => {\n    getTasks();\n  });\n\n  const getTasks = () => {\n    fetch('http://localhost:5000/tasks').then(res => res.json()).then(tasks => setTasks(tasks));\n  };\n\n  const postUser = data => {\n    return fetch('http://localhost:5000/USERS', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json());\n  };\n\n  const addUser = user => {\n    const tempUser = users.map(user => user);\n    tempUser.push(user);\n    setUsers(tempUser);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GameBoard, {\n      board: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: rollDice,\n      children: \"Roll Dice\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Players, {\n      players: players\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Player rolls a: \", playerRoll]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Game, \"rcEMdSrLwQ5kGhRySYdxJZJ18VI=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/john/codeclan_work/week_08/project_two/SnakesAndLadders/client/src/containers/game.js"],"names":["React","useState","useEffect","GameBoard","Players","Game","tasks","setTasks","users","setUsers","playerRoll","setPlayerRoll","boardSize","tiles","tileSize","yAxis","xAxis","board","direction","roll","index","push","console","log","players","rollDice","max","newroll","Math","ceil","random","player_1","getTasks","fetch","then","res","json","postUser","data","method","body","JSON","stringify","headers","addUser","user","tempUser","map"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport GameBoard from '../components/GameBoard';\nimport Players from '../components/Players'\n\nconst Game = () => {\n\n    const [tasks, setTasks] = useState([])\n    const [users, setUsers] = useState([])\n    const [playerRoll, setPlayerRoll] = useState();\n\n    const boardSize = 750;\n    const tiles = 10;\n    const tileSize = 75;\n    let yAxis = (tiles - 1) * tileSize;\n    let xAxis = 0;\n    let board = [];\n    let direction = 1;\n    let roll = 0;\n\n    for (let index = 0; index < tiles * tiles; index++) {\n        // add each tile to the array\n        board.push({ xAxis, yAxis, tileSize, index });\n        xAxis = xAxis + tileSize * direction;\n        // reverse direction after 10th tile and move up 1 tile\n        if (xAxis >= boardSize || xAxis <= -tileSize) {\n            direction *= -1;\n            xAxis += tileSize * direction;\n            yAxis -= tileSize\n        }\n    }\n\n    console.log(board[10])\n\n    let players = []\n    \n    const rollDice = () => {\n        const max = 6\n        let newroll = Math.ceil(Math.random() * max);\n        roll += newroll\n        console.log(roll)\n        console.log(newroll)\n        player_1.xAxis = board[roll].xAxis\n        player_1.yAxis = board[roll].yAxis\n        console.log(player_1.xAxis)\n        console.log(player_1.yAxis)\n        setPlayerRoll(newroll)\n    }\n\n    let player_1 = {\n        xAxis: board[roll].xAxis, \n        yAxis: board[roll].yAxis, \n        index: 1\n    }\n    players.push(player_1)\n\n\n    useEffect(() => {\n        getTasks()\n    })\n\n    const getTasks = () => {\n        fetch('http://localhost:5000/tasks')\n            .then(res => res.json())\n            .then(tasks => setTasks(tasks))\n    }\n\n    const postUser = (data) => {\n        return fetch('http://localhost:5000/USERS', {\n            method: 'POST',\n            body: JSON.stringify(data),\n            headers: { 'Content-Type': 'application/json' }\n        })\n        .then(res => res.json())\n    }\n\n    const addUser = (user) => {\n        const tempUser = users.map(user => user);\n        tempUser.push(user);\n        setUsers(tempUser);\n    }\n\n\n\n    return(\n        <>\n            <GameBoard board={board} />\n            <button onClick={rollDice} >Roll Dice</button>\n            <Players players={players}/>\n            <p>Player rolls a: {playerRoll}</p>\n        </>\n    )\n\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}