{"ast":null,"code":"import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport class RegularPolygon extends Shape {\n  _sceneFunc(context) {\n    const points = this._getPoints();\n\n    context.beginPath();\n    context.moveTo(points[0].x, points[0].y);\n\n    for (var n = 1; n < points.length; n++) {\n      context.lineTo(points[n].x, points[n].y);\n    }\n\n    context.closePath();\n    context.fillStrokeShape(this);\n  }\n\n  _getPoints() {\n    const sides = this.attrs.sides;\n    const radius = this.attrs.radius || 0;\n    const points = [];\n\n    for (var n = 0; n < sides; n++) {\n      points.push({\n        x: radius * Math.sin(n * 2 * Math.PI / sides),\n        y: -1 * radius * Math.cos(n * 2 * Math.PI / sides)\n      });\n    }\n\n    return points;\n  }\n\n  getSelfRect() {\n    const points = this._getPoints();\n\n    var minX = points[0].x;\n    var maxX = points[0].y;\n    var minY = points[0].x;\n    var maxY = points[0].y;\n    points.forEach(point => {\n      minX = Math.min(minX, point.x);\n      maxX = Math.max(maxX, point.x);\n      minY = Math.min(minY, point.y);\n      maxY = Math.max(maxY, point.y);\n    });\n    return {\n      x: minX,\n      y: minY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  }\n\n  getWidth() {\n    return this.radius() * 2;\n  }\n\n  getHeight() {\n    return this.radius() * 2;\n  }\n\n  setWidth(width) {\n    this.radius(width / 2);\n  }\n\n  setHeight(height) {\n    this.radius(height / 2);\n  }\n\n}\nRegularPolygon.prototype.className = 'RegularPolygon';\nRegularPolygon.prototype._centroid = true;\nRegularPolygon.prototype._attrsAffectingSize = ['radius'];\n\n_registerNode(RegularPolygon);\n\nFactory.addGetterSetter(RegularPolygon, 'radius', 0, getNumberValidator());\nFactory.addGetterSetter(RegularPolygon, 'sides', 0, getNumberValidator());","map":{"version":3,"sources":["/Users/stevec/Codeclan_Work/Group_Project/SnakesAndLadders/client/node_modules/konva/lib/shapes/RegularPolygon.js"],"names":["Factory","Shape","getNumberValidator","_registerNode","RegularPolygon","_sceneFunc","context","points","_getPoints","beginPath","moveTo","x","y","n","length","lineTo","closePath","fillStrokeShape","sides","attrs","radius","push","Math","sin","PI","cos","getSelfRect","minX","maxX","minY","maxY","forEach","point","min","max","width","height","getWidth","getHeight","setWidth","setHeight","prototype","className","_centroid","_attrsAffectingSize","addGetterSetter"],"mappings":"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","sourcesContent":["import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport class RegularPolygon extends Shape {\n    _sceneFunc(context) {\n        const points = this._getPoints();\n        context.beginPath();\n        context.moveTo(points[0].x, points[0].y);\n        for (var n = 1; n < points.length; n++) {\n            context.lineTo(points[n].x, points[n].y);\n        }\n        context.closePath();\n        context.fillStrokeShape(this);\n    }\n    _getPoints() {\n        const sides = this.attrs.sides;\n        const radius = this.attrs.radius || 0;\n        const points = [];\n        for (var n = 0; n < sides; n++) {\n            points.push({\n                x: radius * Math.sin((n * 2 * Math.PI) / sides),\n                y: -1 * radius * Math.cos((n * 2 * Math.PI) / sides),\n            });\n        }\n        return points;\n    }\n    getSelfRect() {\n        const points = this._getPoints();\n        var minX = points[0].x;\n        var maxX = points[0].y;\n        var minY = points[0].x;\n        var maxY = points[0].y;\n        points.forEach((point) => {\n            minX = Math.min(minX, point.x);\n            maxX = Math.max(maxX, point.x);\n            minY = Math.min(minY, point.y);\n            maxY = Math.max(maxY, point.y);\n        });\n        return {\n            x: minX,\n            y: minY,\n            width: maxX - minX,\n            height: maxY - minY,\n        };\n    }\n    getWidth() {\n        return this.radius() * 2;\n    }\n    getHeight() {\n        return this.radius() * 2;\n    }\n    setWidth(width) {\n        this.radius(width / 2);\n    }\n    setHeight(height) {\n        this.radius(height / 2);\n    }\n}\nRegularPolygon.prototype.className = 'RegularPolygon';\nRegularPolygon.prototype._centroid = true;\nRegularPolygon.prototype._attrsAffectingSize = ['radius'];\n_registerNode(RegularPolygon);\nFactory.addGetterSetter(RegularPolygon, 'radius', 0, getNumberValidator());\nFactory.addGetterSetter(RegularPolygon, 'sides', 0, getNumberValidator());\n"]},"metadata":{},"sourceType":"module"}