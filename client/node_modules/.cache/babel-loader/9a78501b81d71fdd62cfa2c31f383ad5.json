{"ast":null,"code":"import { Factory } from '../Factory.js';\nimport { Node } from '../Node.js';\nimport { Util } from '../Util.js';\nimport { getNumberValidator } from '../Validators.js';\nexport const Emboss = function (imageData) {\n  var strength = this.embossStrength() * 10,\n      greyLevel = this.embossWhiteLevel() * 255,\n      direction = this.embossDirection(),\n      blend = this.embossBlend(),\n      dirY = 0,\n      dirX = 0,\n      data = imageData.data,\n      w = imageData.width,\n      h = imageData.height,\n      w4 = w * 4,\n      y = h;\n\n  switch (direction) {\n    case 'top-left':\n      dirY = -1;\n      dirX = -1;\n      break;\n\n    case 'top':\n      dirY = -1;\n      dirX = 0;\n      break;\n\n    case 'top-right':\n      dirY = -1;\n      dirX = 1;\n      break;\n\n    case 'right':\n      dirY = 0;\n      dirX = 1;\n      break;\n\n    case 'bottom-right':\n      dirY = 1;\n      dirX = 1;\n      break;\n\n    case 'bottom':\n      dirY = 1;\n      dirX = 0;\n      break;\n\n    case 'bottom-left':\n      dirY = 1;\n      dirX = -1;\n      break;\n\n    case 'left':\n      dirY = 0;\n      dirX = -1;\n      break;\n\n    default:\n      Util.error('Unknown emboss direction: ' + direction);\n  }\n\n  do {\n    var offsetY = (y - 1) * w4;\n    var otherY = dirY;\n\n    if (y + otherY < 1) {\n      otherY = 0;\n    }\n\n    if (y + otherY > h) {\n      otherY = 0;\n    }\n\n    var offsetYOther = (y - 1 + otherY) * w * 4;\n    var x = w;\n\n    do {\n      var offset = offsetY + (x - 1) * 4;\n      var otherX = dirX;\n\n      if (x + otherX < 1) {\n        otherX = 0;\n      }\n\n      if (x + otherX > w) {\n        otherX = 0;\n      }\n\n      var offsetOther = offsetYOther + (x - 1 + otherX) * 4;\n      var dR = data[offset] - data[offsetOther];\n      var dG = data[offset + 1] - data[offsetOther + 1];\n      var dB = data[offset + 2] - data[offsetOther + 2];\n      var dif = dR;\n      var absDif = dif > 0 ? dif : -dif;\n      var absG = dG > 0 ? dG : -dG;\n      var absB = dB > 0 ? dB : -dB;\n\n      if (absG > absDif) {\n        dif = dG;\n      }\n\n      if (absB > absDif) {\n        dif = dB;\n      }\n\n      dif *= strength;\n\n      if (blend) {\n        var r = data[offset] + dif;\n        var g = data[offset + 1] + dif;\n        var b = data[offset + 2] + dif;\n        data[offset] = r > 255 ? 255 : r < 0 ? 0 : r;\n        data[offset + 1] = g > 255 ? 255 : g < 0 ? 0 : g;\n        data[offset + 2] = b > 255 ? 255 : b < 0 ? 0 : b;\n      } else {\n        var grey = greyLevel - dif;\n\n        if (grey < 0) {\n          grey = 0;\n        } else if (grey > 255) {\n          grey = 255;\n        }\n\n        data[offset] = data[offset + 1] = data[offset + 2] = grey;\n      }\n    } while (--x);\n  } while (--y);\n};\nFactory.addGetterSetter(Node, 'embossStrength', 0.5, getNumberValidator(), Factory.afterSetFilter);\nFactory.addGetterSetter(Node, 'embossWhiteLevel', 0.5, getNumberValidator(), Factory.afterSetFilter);\nFactory.addGetterSetter(Node, 'embossDirection', 'top-left', null, Factory.afterSetFilter);\nFactory.addGetterSetter(Node, 'embossBlend', false, null, Factory.afterSetFilter);","map":{"version":3,"sources":["/Users/stevec/Codeclan_Work/Group_Project/SnakesAndLadders/client/node_modules/konva/lib/filters/Emboss.js"],"names":["Factory","Node","Util","getNumberValidator","Emboss","imageData","strength","embossStrength","greyLevel","embossWhiteLevel","direction","embossDirection","blend","embossBlend","dirY","dirX","data","w","width","h","height","w4","y","error","offsetY","otherY","offsetYOther","x","offset","otherX","offsetOther","dR","dG","dB","dif","absDif","absG","absB","r","g","b","grey","addGetterSetter","afterSetFilter"],"mappings":"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","sourcesContent":["import { Factory } from '../Factory.js';\nimport { Node } from '../Node.js';\nimport { Util } from '../Util.js';\nimport { getNumberValidator } from '../Validators.js';\nexport const Emboss = function (imageData) {\n    var strength = this.embossStrength() * 10, greyLevel = this.embossWhiteLevel() * 255, direction = this.embossDirection(), blend = this.embossBlend(), dirY = 0, dirX = 0, data = imageData.data, w = imageData.width, h = imageData.height, w4 = w * 4, y = h;\n    switch (direction) {\n        case 'top-left':\n            dirY = -1;\n            dirX = -1;\n            break;\n        case 'top':\n            dirY = -1;\n            dirX = 0;\n            break;\n        case 'top-right':\n            dirY = -1;\n            dirX = 1;\n            break;\n        case 'right':\n            dirY = 0;\n            dirX = 1;\n            break;\n        case 'bottom-right':\n            dirY = 1;\n            dirX = 1;\n            break;\n        case 'bottom':\n            dirY = 1;\n            dirX = 0;\n            break;\n        case 'bottom-left':\n            dirY = 1;\n            dirX = -1;\n            break;\n        case 'left':\n            dirY = 0;\n            dirX = -1;\n            break;\n        default:\n            Util.error('Unknown emboss direction: ' + direction);\n    }\n    do {\n        var offsetY = (y - 1) * w4;\n        var otherY = dirY;\n        if (y + otherY < 1) {\n            otherY = 0;\n        }\n        if (y + otherY > h) {\n            otherY = 0;\n        }\n        var offsetYOther = (y - 1 + otherY) * w * 4;\n        var x = w;\n        do {\n            var offset = offsetY + (x - 1) * 4;\n            var otherX = dirX;\n            if (x + otherX < 1) {\n                otherX = 0;\n            }\n            if (x + otherX > w) {\n                otherX = 0;\n            }\n            var offsetOther = offsetYOther + (x - 1 + otherX) * 4;\n            var dR = data[offset] - data[offsetOther];\n            var dG = data[offset + 1] - data[offsetOther + 1];\n            var dB = data[offset + 2] - data[offsetOther + 2];\n            var dif = dR;\n            var absDif = dif > 0 ? dif : -dif;\n            var absG = dG > 0 ? dG : -dG;\n            var absB = dB > 0 ? dB : -dB;\n            if (absG > absDif) {\n                dif = dG;\n            }\n            if (absB > absDif) {\n                dif = dB;\n            }\n            dif *= strength;\n            if (blend) {\n                var r = data[offset] + dif;\n                var g = data[offset + 1] + dif;\n                var b = data[offset + 2] + dif;\n                data[offset] = r > 255 ? 255 : r < 0 ? 0 : r;\n                data[offset + 1] = g > 255 ? 255 : g < 0 ? 0 : g;\n                data[offset + 2] = b > 255 ? 255 : b < 0 ? 0 : b;\n            }\n            else {\n                var grey = greyLevel - dif;\n                if (grey < 0) {\n                    grey = 0;\n                }\n                else if (grey > 255) {\n                    grey = 255;\n                }\n                data[offset] = data[offset + 1] = data[offset + 2] = grey;\n            }\n        } while (--x);\n    } while (--y);\n};\nFactory.addGetterSetter(Node, 'embossStrength', 0.5, getNumberValidator(), Factory.afterSetFilter);\nFactory.addGetterSetter(Node, 'embossWhiteLevel', 0.5, getNumberValidator(), Factory.afterSetFilter);\nFactory.addGetterSetter(Node, 'embossDirection', 'top-left', null, Factory.afterSetFilter);\nFactory.addGetterSetter(Node, 'embossBlend', false, null, Factory.afterSetFilter);\n"]},"metadata":{},"sourceType":"module"}