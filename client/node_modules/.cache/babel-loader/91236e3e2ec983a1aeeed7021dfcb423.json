{"ast":null,"code":"var _jsxFileName = \"/Users/stevec/Codeclan_Work/Group_Project/SnakesAndLadders/client/src/components/GameBoard.js\";\nimport { Rect, Group, Text } from \"react-konva\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst GameBoard = () => {\n  const width = 500;\n  const height = 500;\n  const numCol = 10;\n  const numRow = 10;\n  const tileSize = 50;\n  let yAxis = (numRow - 1) * tileSize;\n  let xAxis = 0;\n  let board = [];\n  let direction = 1;\n\n  for (let index = 0; index < numRow * numRow; index++) {\n    board.push({\n      xAxis,\n      yAxis,\n      tileSize,\n      index\n    });\n    xAxis = xAxis + tileSize * direction;\n\n    if (xAxis >= width || xAxis <= -tileSize) {\n      direction *= -1;\n      xAxis += tileSize * direction;\n      yAxis -= tileSize;\n    }\n  }\n\n  console.log(board); // const canvas = props => {\n  //     const canvasRef = useEffect(null);\n  //     const draw = ctx => {\n  //         board.forEach(tile => {\n  //             ctx.beginPath();\n  //             ctx.rect(xAxis, yAxis, tileSize, tileSize);\n  //             ctx.stroke();\n  //         })\n  //     }\n  //     useEffect(() => {\n  //         const canvas = canvasRef.current;\n  //         const context = canvas.getContext('2d');\n  //         draw(context)\n  //     }, [draw])\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: Object.keys(board).map(box => {\n      const isEven = box % 2 === 0;\n      return /*#__PURE__*/_jsxDEV(Group, {\n        children: [/*#__PURE__*/_jsxDEV(Rect, {\n          x: 0,\n          y: 0,\n          width: width,\n          height: height,\n          strokeWidth: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Rect, {\n          x: layout[box].x - boxWidth / 2,\n          y: layout[box].y - boxHeight / 2,\n          width: boxWidth,\n          height: boxHeight,\n          cornerRadius: 10,\n          scale: {\n            x: 0.92,\n            y: 0.92\n          },\n          shadowEnabled: true,\n          shadowOffset: {\n            x: 0,\n            y: -5\n          },\n          shadowOpacity: 1,\n          shadowBlur: 6,\n          shadowColor: \"rgba(0,0,0,0.2)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          x: layout[box].x - boxWidth / 2,\n          y: layout[box].y - boxHeight / 2,\n          fill: \"rgba(0,0,0,0.6)\",\n          text: box,\n          padding: 4,\n          fontSize: 16,\n          fontStyle: \"bold\",\n          fontFamily: \"SDF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)]\n      }, `box_${box}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false);\n};\n\n_c = GameBoard;\nexport default GameBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"sources":["/Users/stevec/Codeclan_Work/Group_Project/SnakesAndLadders/client/src/components/GameBoard.js"],"names":["Rect","Group","Text","GameBoard","width","height","numCol","numRow","tileSize","yAxis","xAxis","board","direction","index","push","console","log","Object","keys","map","box","isEven","layout","x","boxWidth","y","boxHeight"],"mappings":"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","sourcesContent":["import {Rect, Group, Text} from \"react-konva\"\n\nconst GameBoard = () => {\n\n    const width = 500;\n    const height = 500;\n    const numCol = 10;\n    const numRow = 10;\n    const tileSize = 50;\n    let yAxis = (numRow -1 ) * tileSize;\n    let xAxis = 0;\n    let board = [];\n    let direction = 1;\n\n    for (let index = 0; index < numRow * numRow; index++) {\n        board.push({xAxis, yAxis, tileSize, index});\n        xAxis = xAxis + tileSize * direction;\n        if (xAxis >= width || xAxis <= -tileSize) {\n            direction*= -1;\n            xAxis += tileSize * direction;\n            yAxis -= tileSize\n        }\n    }\n    console.log(board)\n\n    // const canvas = props => {\n    //     const canvasRef = useEffect(null);\n    //     const draw = ctx => {\n    //         board.forEach(tile => {\n    //             ctx.beginPath();\n    //             ctx.rect(xAxis, yAxis, tileSize, tileSize);\n    //             ctx.stroke();\n    //         })\n    //     }\n\n    //     useEffect(() => {\n    //         const canvas = canvasRef.current;\n    //         const context = canvas.getContext('2d');\n    //         draw(context)\n    //     }, [draw])\n        \n    \n\n    return (\n        <>\n            {Object.keys(board).map(box => {\n        const isEven = box % 2 === 0;\n        return (\n          <Group key={`box_${box}`}>\n            <Rect x={0} y={0} width={width} height={height} strokeWidth={4} />\n            <Rect\n              x={layout[box].x - boxWidth / 2}\n              y={layout[box].y - boxHeight / 2}\n              width={boxWidth}\n              height={boxHeight}\n              cornerRadius={10}\n              scale={{ x: 0.92, y: 0.92 }}\n              shadowEnabled={true}\n              shadowOffset={{ x: 0, y: -5 }}\n              shadowOpacity={1}\n              shadowBlur={6}\n              shadowColor='rgba(0,0,0,0.2)'\n            />\n            <Text\n              x={layout[box].x - boxWidth / 2}\n              y={layout[box].y - boxHeight / 2}\n              fill='rgba(0,0,0,0.6)'\n              text={box}\n              padding={4}\n              fontSize={16}\n              fontStyle='bold'\n              fontFamily='SDF'\n            />\n          </Group>\n        );\n      })}\n        </>\n    )\n}\n\nexport default GameBoard;"]},"metadata":{},"sourceType":"module"}