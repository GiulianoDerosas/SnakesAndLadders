{"ast":null,"code":"import { Util } from './Util.js';\nimport { getComponentValidator } from './Validators.js';\nvar GET = 'get',\n    SET = 'set';\nexport const Factory = {\n  addGetterSetter(constructor, attr, def, validator, after) {\n    Factory.addGetter(constructor, attr, def);\n    Factory.addSetter(constructor, attr, validator, after);\n    Factory.addOverloadedGetterSetter(constructor, attr);\n  },\n\n  addGetter(constructor, attr, def) {\n    var method = GET + Util._capitalize(attr);\n\n    constructor.prototype[method] = constructor.prototype[method] || function () {\n      var val = this.attrs[attr];\n      return val === undefined ? def : val;\n    };\n  },\n\n  addSetter(constructor, attr, validator, after) {\n    var method = SET + Util._capitalize(attr);\n\n    if (!constructor.prototype[method]) {\n      Factory.overWriteSetter(constructor, attr, validator, after);\n    }\n  },\n\n  overWriteSetter(constructor, attr, validator, after) {\n    var method = SET + Util._capitalize(attr);\n\n    constructor.prototype[method] = function (val) {\n      if (validator && val !== undefined && val !== null) {\n        val = validator.call(this, val, attr);\n      }\n\n      this._setAttr(attr, val);\n\n      if (after) {\n        after.call(this);\n      }\n\n      return this;\n    };\n  },\n\n  addComponentsGetterSetter(constructor, attr, components, validator, after) {\n    var len = components.length,\n        capitalize = Util._capitalize,\n        getter = GET + capitalize(attr),\n        setter = SET + capitalize(attr),\n        n,\n        component;\n\n    constructor.prototype[getter] = function () {\n      var ret = {};\n\n      for (n = 0; n < len; n++) {\n        component = components[n];\n        ret[component] = this.getAttr(attr + capitalize(component));\n      }\n\n      return ret;\n    };\n\n    var basicValidator = getComponentValidator(components);\n\n    constructor.prototype[setter] = function (val) {\n      var oldVal = this.attrs[attr],\n          key;\n\n      if (validator) {\n        val = validator.call(this, val);\n      }\n\n      if (basicValidator) {\n        basicValidator.call(this, val, attr);\n      }\n\n      for (key in val) {\n        if (!val.hasOwnProperty(key)) {\n          continue;\n        }\n\n        this._setAttr(attr + capitalize(key), val[key]);\n      }\n\n      this._fireChangeEvent(attr, oldVal, val);\n\n      if (after) {\n        after.call(this);\n      }\n\n      return this;\n    };\n\n    Factory.addOverloadedGetterSetter(constructor, attr);\n  },\n\n  addOverloadedGetterSetter(constructor, attr) {\n    var capitalizedAttr = Util._capitalize(attr),\n        setter = SET + capitalizedAttr,\n        getter = GET + capitalizedAttr;\n\n    constructor.prototype[attr] = function () {\n      if (arguments.length) {\n        this[setter](arguments[0]);\n        return this;\n      }\n\n      return this[getter]();\n    };\n  },\n\n  addDeprecatedGetterSetter(constructor, attr, def, validator) {\n    Util.error('Adding deprecated ' + attr);\n\n    var method = GET + Util._capitalize(attr);\n\n    var message = attr + ' property is deprecated and will be removed soon. Look at Konva change log for more information.';\n\n    constructor.prototype[method] = function () {\n      Util.error(message);\n      var val = this.attrs[attr];\n      return val === undefined ? def : val;\n    };\n\n    Factory.addSetter(constructor, attr, validator, function () {\n      Util.error(message);\n    });\n    Factory.addOverloadedGetterSetter(constructor, attr);\n  },\n\n  backCompat(constructor, methods) {\n    Util.each(methods, function (oldMethodName, newMethodName) {\n      var method = constructor.prototype[newMethodName];\n\n      var oldGetter = GET + Util._capitalize(oldMethodName);\n\n      var oldSetter = SET + Util._capitalize(oldMethodName);\n\n      function deprecated() {\n        method.apply(this, arguments);\n        Util.error('\"' + oldMethodName + '\" method is deprecated and will be removed soon. Use \"\"' + newMethodName + '\" instead.');\n      }\n\n      constructor.prototype[oldMethodName] = deprecated;\n      constructor.prototype[oldGetter] = deprecated;\n      constructor.prototype[oldSetter] = deprecated;\n    });\n  },\n\n  afterSetFilter() {\n    this._filterUpToDate = false;\n  }\n\n};","map":{"version":3,"sources":["/Users/stevec/Codeclan_Work/Group_Project/SnakesAndLadders/client/node_modules/konva/lib/Factory.js"],"names":["Util","getComponentValidator","GET","SET","Factory","addGetterSetter","constructor","attr","def","validator","after","addGetter","addSetter","addOverloadedGetterSetter","method","_capitalize","prototype","val","attrs","undefined","overWriteSetter","call","_setAttr","addComponentsGetterSetter","components","len","length","capitalize","getter","setter","n","component","ret","getAttr","basicValidator","oldVal","key","hasOwnProperty","_fireChangeEvent","capitalizedAttr","arguments","addDeprecatedGetterSetter","error","message","backCompat","methods","each","oldMethodName","newMethodName","oldGetter","oldSetter","deprecated","apply","afterSetFilter","_filterUpToDate"],"mappings":"AAAA,SAASA,IAAT,QAAqB,WAArB;AACA,SAASC,qBAAT,QAAsC,iBAAtC;AACA,IAAIC,GAAG,GAAG,KAAV;AAAA,IAAiBC,GAAG,GAAG,KAAvB;AACA,OAAO,MAAMC,OAAO,GAAG;AACnBC,EAAAA,eAAe,CAACC,WAAD,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,SAAzB,EAAoCC,KAApC,EAA2C;AACtDN,IAAAA,OAAO,CAACO,SAAR,CAAkBL,WAAlB,EAA+BC,IAA/B,EAAqCC,GAArC;AACAJ,IAAAA,OAAO,CAACQ,SAAR,CAAkBN,WAAlB,EAA+BC,IAA/B,EAAqCE,SAArC,EAAgDC,KAAhD;AACAN,IAAAA,OAAO,CAACS,yBAAR,CAAkCP,WAAlC,EAA+CC,IAA/C;AACH,GALkB;;AAMnBI,EAAAA,SAAS,CAACL,WAAD,EAAcC,IAAd,EAAoBC,GAApB,EAAyB;AAC9B,QAAIM,MAAM,GAAGZ,GAAG,GAAGF,IAAI,CAACe,WAAL,CAAiBR,IAAjB,CAAnB;;AACAD,IAAAA,WAAW,CAACU,SAAZ,CAAsBF,MAAtB,IACIR,WAAW,CAACU,SAAZ,CAAsBF,MAAtB,KACI,YAAY;AACR,UAAIG,GAAG,GAAG,KAAKC,KAAL,CAAWX,IAAX,CAAV;AACA,aAAOU,GAAG,KAAKE,SAAR,GAAoBX,GAApB,GAA0BS,GAAjC;AACH,KALT;AAMH,GAdkB;;AAenBL,EAAAA,SAAS,CAACN,WAAD,EAAcC,IAAd,EAAoBE,SAApB,EAA+BC,KAA/B,EAAsC;AAC3C,QAAII,MAAM,GAAGX,GAAG,GAAGH,IAAI,CAACe,WAAL,CAAiBR,IAAjB,CAAnB;;AACA,QAAI,CAACD,WAAW,CAACU,SAAZ,CAAsBF,MAAtB,CAAL,EAAoC;AAChCV,MAAAA,OAAO,CAACgB,eAAR,CAAwBd,WAAxB,EAAqCC,IAArC,EAA2CE,SAA3C,EAAsDC,KAAtD;AACH;AACJ,GApBkB;;AAqBnBU,EAAAA,eAAe,CAACd,WAAD,EAAcC,IAAd,EAAoBE,SAApB,EAA+BC,KAA/B,EAAsC;AACjD,QAAII,MAAM,GAAGX,GAAG,GAAGH,IAAI,CAACe,WAAL,CAAiBR,IAAjB,CAAnB;;AACAD,IAAAA,WAAW,CAACU,SAAZ,CAAsBF,MAAtB,IAAgC,UAAUG,GAAV,EAAe;AAC3C,UAAIR,SAAS,IAAIQ,GAAG,KAAKE,SAArB,IAAkCF,GAAG,KAAK,IAA9C,EAAoD;AAChDA,QAAAA,GAAG,GAAGR,SAAS,CAACY,IAAV,CAAe,IAAf,EAAqBJ,GAArB,EAA0BV,IAA1B,CAAN;AACH;;AACD,WAAKe,QAAL,CAAcf,IAAd,EAAoBU,GAApB;;AACA,UAAIP,KAAJ,EAAW;AACPA,QAAAA,KAAK,CAACW,IAAN,CAAW,IAAX;AACH;;AACD,aAAO,IAAP;AACH,KATD;AAUH,GAjCkB;;AAkCnBE,EAAAA,yBAAyB,CAACjB,WAAD,EAAcC,IAAd,EAAoBiB,UAApB,EAAgCf,SAAhC,EAA2CC,KAA3C,EAAkD;AACvE,QAAIe,GAAG,GAAGD,UAAU,CAACE,MAArB;AAAA,QAA6BC,UAAU,GAAG3B,IAAI,CAACe,WAA/C;AAAA,QAA4Da,MAAM,GAAG1B,GAAG,GAAGyB,UAAU,CAACpB,IAAD,CAArF;AAAA,QAA6FsB,MAAM,GAAG1B,GAAG,GAAGwB,UAAU,CAACpB,IAAD,CAAtH;AAAA,QAA8HuB,CAA9H;AAAA,QAAiIC,SAAjI;;AACAzB,IAAAA,WAAW,CAACU,SAAZ,CAAsBY,MAAtB,IAAgC,YAAY;AACxC,UAAII,GAAG,GAAG,EAAV;;AACA,WAAKF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGL,GAAhB,EAAqBK,CAAC,EAAtB,EAA0B;AACtBC,QAAAA,SAAS,GAAGP,UAAU,CAACM,CAAD,CAAtB;AACAE,QAAAA,GAAG,CAACD,SAAD,CAAH,GAAiB,KAAKE,OAAL,CAAa1B,IAAI,GAAGoB,UAAU,CAACI,SAAD,CAA9B,CAAjB;AACH;;AACD,aAAOC,GAAP;AACH,KAPD;;AAQA,QAAIE,cAAc,GAAGjC,qBAAqB,CAACuB,UAAD,CAA1C;;AACAlB,IAAAA,WAAW,CAACU,SAAZ,CAAsBa,MAAtB,IAAgC,UAAUZ,GAAV,EAAe;AAC3C,UAAIkB,MAAM,GAAG,KAAKjB,KAAL,CAAWX,IAAX,CAAb;AAAA,UAA+B6B,GAA/B;;AACA,UAAI3B,SAAJ,EAAe;AACXQ,QAAAA,GAAG,GAAGR,SAAS,CAACY,IAAV,CAAe,IAAf,EAAqBJ,GAArB,CAAN;AACH;;AACD,UAAIiB,cAAJ,EAAoB;AAChBA,QAAAA,cAAc,CAACb,IAAf,CAAoB,IAApB,EAA0BJ,GAA1B,EAA+BV,IAA/B;AACH;;AACD,WAAK6B,GAAL,IAAYnB,GAAZ,EAAiB;AACb,YAAI,CAACA,GAAG,CAACoB,cAAJ,CAAmBD,GAAnB,CAAL,EAA8B;AAC1B;AACH;;AACD,aAAKd,QAAL,CAAcf,IAAI,GAAGoB,UAAU,CAACS,GAAD,CAA/B,EAAsCnB,GAAG,CAACmB,GAAD,CAAzC;AACH;;AACD,WAAKE,gBAAL,CAAsB/B,IAAtB,EAA4B4B,MAA5B,EAAoClB,GAApC;;AACA,UAAIP,KAAJ,EAAW;AACPA,QAAAA,KAAK,CAACW,IAAN,CAAW,IAAX;AACH;;AACD,aAAO,IAAP;AACH,KAnBD;;AAoBAjB,IAAAA,OAAO,CAACS,yBAAR,CAAkCP,WAAlC,EAA+CC,IAA/C;AACH,GAlEkB;;AAmEnBM,EAAAA,yBAAyB,CAACP,WAAD,EAAcC,IAAd,EAAoB;AACzC,QAAIgC,eAAe,GAAGvC,IAAI,CAACe,WAAL,CAAiBR,IAAjB,CAAtB;AAAA,QAA8CsB,MAAM,GAAG1B,GAAG,GAAGoC,eAA7D;AAAA,QAA8EX,MAAM,GAAG1B,GAAG,GAAGqC,eAA7F;;AACAjC,IAAAA,WAAW,CAACU,SAAZ,CAAsBT,IAAtB,IAA8B,YAAY;AACtC,UAAIiC,SAAS,CAACd,MAAd,EAAsB;AAClB,aAAKG,MAAL,EAAaW,SAAS,CAAC,CAAD,CAAtB;AACA,eAAO,IAAP;AACH;;AACD,aAAO,KAAKZ,MAAL,GAAP;AACH,KAND;AAOH,GA5EkB;;AA6EnBa,EAAAA,yBAAyB,CAACnC,WAAD,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,SAAzB,EAAoC;AACzDT,IAAAA,IAAI,CAAC0C,KAAL,CAAW,uBAAuBnC,IAAlC;;AACA,QAAIO,MAAM,GAAGZ,GAAG,GAAGF,IAAI,CAACe,WAAL,CAAiBR,IAAjB,CAAnB;;AACA,QAAIoC,OAAO,GAAGpC,IAAI,GACd,kGADJ;;AAEAD,IAAAA,WAAW,CAACU,SAAZ,CAAsBF,MAAtB,IAAgC,YAAY;AACxCd,MAAAA,IAAI,CAAC0C,KAAL,CAAWC,OAAX;AACA,UAAI1B,GAAG,GAAG,KAAKC,KAAL,CAAWX,IAAX,CAAV;AACA,aAAOU,GAAG,KAAKE,SAAR,GAAoBX,GAApB,GAA0BS,GAAjC;AACH,KAJD;;AAKAb,IAAAA,OAAO,CAACQ,SAAR,CAAkBN,WAAlB,EAA+BC,IAA/B,EAAqCE,SAArC,EAAgD,YAAY;AACxDT,MAAAA,IAAI,CAAC0C,KAAL,CAAWC,OAAX;AACH,KAFD;AAGAvC,IAAAA,OAAO,CAACS,yBAAR,CAAkCP,WAAlC,EAA+CC,IAA/C;AACH,GA3FkB;;AA4FnBqC,EAAAA,UAAU,CAACtC,WAAD,EAAcuC,OAAd,EAAuB;AAC7B7C,IAAAA,IAAI,CAAC8C,IAAL,CAAUD,OAAV,EAAmB,UAAUE,aAAV,EAAyBC,aAAzB,EAAwC;AACvD,UAAIlC,MAAM,GAAGR,WAAW,CAACU,SAAZ,CAAsBgC,aAAtB,CAAb;;AACA,UAAIC,SAAS,GAAG/C,GAAG,GAAGF,IAAI,CAACe,WAAL,CAAiBgC,aAAjB,CAAtB;;AACA,UAAIG,SAAS,GAAG/C,GAAG,GAAGH,IAAI,CAACe,WAAL,CAAiBgC,aAAjB,CAAtB;;AACA,eAASI,UAAT,GAAsB;AAClBrC,QAAAA,MAAM,CAACsC,KAAP,CAAa,IAAb,EAAmBZ,SAAnB;AACAxC,QAAAA,IAAI,CAAC0C,KAAL,CAAW,MACPK,aADO,GAEP,yDAFO,GAGPC,aAHO,GAIP,YAJJ;AAKH;;AACD1C,MAAAA,WAAW,CAACU,SAAZ,CAAsB+B,aAAtB,IAAuCI,UAAvC;AACA7C,MAAAA,WAAW,CAACU,SAAZ,CAAsBiC,SAAtB,IAAmCE,UAAnC;AACA7C,MAAAA,WAAW,CAACU,SAAZ,CAAsBkC,SAAtB,IAAmCC,UAAnC;AACH,KAfD;AAgBH,GA7GkB;;AA8GnBE,EAAAA,cAAc,GAAG;AACb,SAAKC,eAAL,GAAuB,KAAvB;AACH;;AAhHkB,CAAhB","sourcesContent":["import { Util } from './Util.js';\nimport { getComponentValidator } from './Validators.js';\nvar GET = 'get', SET = 'set';\nexport const Factory = {\n    addGetterSetter(constructor, attr, def, validator, after) {\n        Factory.addGetter(constructor, attr, def);\n        Factory.addSetter(constructor, attr, validator, after);\n        Factory.addOverloadedGetterSetter(constructor, attr);\n    },\n    addGetter(constructor, attr, def) {\n        var method = GET + Util._capitalize(attr);\n        constructor.prototype[method] =\n            constructor.prototype[method] ||\n                function () {\n                    var val = this.attrs[attr];\n                    return val === undefined ? def : val;\n                };\n    },\n    addSetter(constructor, attr, validator, after) {\n        var method = SET + Util._capitalize(attr);\n        if (!constructor.prototype[method]) {\n            Factory.overWriteSetter(constructor, attr, validator, after);\n        }\n    },\n    overWriteSetter(constructor, attr, validator, after) {\n        var method = SET + Util._capitalize(attr);\n        constructor.prototype[method] = function (val) {\n            if (validator && val !== undefined && val !== null) {\n                val = validator.call(this, val, attr);\n            }\n            this._setAttr(attr, val);\n            if (after) {\n                after.call(this);\n            }\n            return this;\n        };\n    },\n    addComponentsGetterSetter(constructor, attr, components, validator, after) {\n        var len = components.length, capitalize = Util._capitalize, getter = GET + capitalize(attr), setter = SET + capitalize(attr), n, component;\n        constructor.prototype[getter] = function () {\n            var ret = {};\n            for (n = 0; n < len; n++) {\n                component = components[n];\n                ret[component] = this.getAttr(attr + capitalize(component));\n            }\n            return ret;\n        };\n        var basicValidator = getComponentValidator(components);\n        constructor.prototype[setter] = function (val) {\n            var oldVal = this.attrs[attr], key;\n            if (validator) {\n                val = validator.call(this, val);\n            }\n            if (basicValidator) {\n                basicValidator.call(this, val, attr);\n            }\n            for (key in val) {\n                if (!val.hasOwnProperty(key)) {\n                    continue;\n                }\n                this._setAttr(attr + capitalize(key), val[key]);\n            }\n            this._fireChangeEvent(attr, oldVal, val);\n            if (after) {\n                after.call(this);\n            }\n            return this;\n        };\n        Factory.addOverloadedGetterSetter(constructor, attr);\n    },\n    addOverloadedGetterSetter(constructor, attr) {\n        var capitalizedAttr = Util._capitalize(attr), setter = SET + capitalizedAttr, getter = GET + capitalizedAttr;\n        constructor.prototype[attr] = function () {\n            if (arguments.length) {\n                this[setter](arguments[0]);\n                return this;\n            }\n            return this[getter]();\n        };\n    },\n    addDeprecatedGetterSetter(constructor, attr, def, validator) {\n        Util.error('Adding deprecated ' + attr);\n        var method = GET + Util._capitalize(attr);\n        var message = attr +\n            ' property is deprecated and will be removed soon. Look at Konva change log for more information.';\n        constructor.prototype[method] = function () {\n            Util.error(message);\n            var val = this.attrs[attr];\n            return val === undefined ? def : val;\n        };\n        Factory.addSetter(constructor, attr, validator, function () {\n            Util.error(message);\n        });\n        Factory.addOverloadedGetterSetter(constructor, attr);\n    },\n    backCompat(constructor, methods) {\n        Util.each(methods, function (oldMethodName, newMethodName) {\n            var method = constructor.prototype[newMethodName];\n            var oldGetter = GET + Util._capitalize(oldMethodName);\n            var oldSetter = SET + Util._capitalize(oldMethodName);\n            function deprecated() {\n                method.apply(this, arguments);\n                Util.error('\"' +\n                    oldMethodName +\n                    '\" method is deprecated and will be removed soon. Use \"\"' +\n                    newMethodName +\n                    '\" instead.');\n            }\n            constructor.prototype[oldMethodName] = deprecated;\n            constructor.prototype[oldGetter] = deprecated;\n            constructor.prototype[oldSetter] = deprecated;\n        });\n    },\n    afterSetFilter() {\n        this._filterUpToDate = false;\n    },\n};\n"]},"metadata":{},"sourceType":"module"}