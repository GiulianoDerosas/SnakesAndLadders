{"ast":null,"code":"import { Util } from './Util.js';\nimport { SceneContext, HitContext } from './Context.js';\nimport { Konva } from './Global.js';\nimport { Factory } from './Factory.js';\nimport { getNumberValidator } from './Validators.js';\n\nvar _pixelRatio;\n\nfunction getDevicePixelRatio() {\n  if (_pixelRatio) {\n    return _pixelRatio;\n  }\n\n  var canvas = Util.createCanvasElement();\n  var context = canvas.getContext('2d');\n\n  _pixelRatio = function () {\n    var devicePixelRatio = Konva._global.devicePixelRatio || 1,\n        backingStoreRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n    return devicePixelRatio / backingStoreRatio;\n  }();\n\n  return _pixelRatio;\n}\n\nexport class Canvas {\n  constructor(config) {\n    this.pixelRatio = 1;\n    this.width = 0;\n    this.height = 0;\n    this.isCache = false;\n    var conf = config || {};\n    var pixelRatio = conf.pixelRatio || Konva.pixelRatio || getDevicePixelRatio();\n    this.pixelRatio = pixelRatio;\n    this._canvas = Util.createCanvasElement();\n    this._canvas.style.padding = '0';\n    this._canvas.style.margin = '0';\n    this._canvas.style.border = '0';\n    this._canvas.style.background = 'transparent';\n    this._canvas.style.position = 'absolute';\n    this._canvas.style.top = '0';\n    this._canvas.style.left = '0';\n  }\n\n  getContext() {\n    return this.context;\n  }\n\n  getPixelRatio() {\n    return this.pixelRatio;\n  }\n\n  setPixelRatio(pixelRatio) {\n    var previousRatio = this.pixelRatio;\n    this.pixelRatio = pixelRatio;\n    this.setSize(this.getWidth() / previousRatio, this.getHeight() / previousRatio);\n  }\n\n  setWidth(width) {\n    this.width = this._canvas.width = width * this.pixelRatio;\n    this._canvas.style.width = width + 'px';\n\n    var pixelRatio = this.pixelRatio,\n        _context = this.getContext()._context;\n\n    _context.scale(pixelRatio, pixelRatio);\n  }\n\n  setHeight(height) {\n    this.height = this._canvas.height = height * this.pixelRatio;\n    this._canvas.style.height = height + 'px';\n\n    var pixelRatio = this.pixelRatio,\n        _context = this.getContext()._context;\n\n    _context.scale(pixelRatio, pixelRatio);\n  }\n\n  getWidth() {\n    return this.width;\n  }\n\n  getHeight() {\n    return this.height;\n  }\n\n  setSize(width, height) {\n    this.setWidth(width || 0);\n    this.setHeight(height || 0);\n  }\n\n  toDataURL(mimeType, quality) {\n    try {\n      return this._canvas.toDataURL(mimeType, quality);\n    } catch (e) {\n      try {\n        return this._canvas.toDataURL();\n      } catch (err) {\n        Util.error('Unable to get data URL. ' + err.message + ' For more info read https://konvajs.org/docs/posts/Tainted_Canvas.html.');\n        return '';\n      }\n    }\n  }\n\n}\nFactory.addGetterSetter(Canvas, 'pixelRatio', undefined, getNumberValidator());\nexport class SceneCanvas extends Canvas {\n  constructor(config = {\n    width: 0,\n    height: 0\n  }) {\n    super(config);\n    this.context = new SceneContext(this);\n    this.setSize(config.width, config.height);\n  }\n\n}\nexport class HitCanvas extends Canvas {\n  constructor(config = {\n    width: 0,\n    height: 0\n  }) {\n    super(config);\n    this.hitCanvas = true;\n    this.context = new HitContext(this);\n    this.setSize(config.width, config.height);\n  }\n\n}","map":{"version":3,"sources":["/Users/stevec/Codeclan_Work/Group_Project/SnakesAndLadders/client/node_modules/konva/lib/Canvas.js"],"names":["Util","SceneContext","HitContext","Konva","Factory","getNumberValidator","_pixelRatio","getDevicePixelRatio","canvas","createCanvasElement","context","getContext","devicePixelRatio","_global","backingStoreRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","Canvas","constructor","config","pixelRatio","width","height","isCache","conf","_canvas","style","padding","margin","border","background","position","top","left","getPixelRatio","setPixelRatio","previousRatio","setSize","getWidth","getHeight","setWidth","_context","scale","setHeight","toDataURL","mimeType","quality","e","err","error","message","addGetterSetter","undefined","SceneCanvas","HitCanvas","hitCanvas"],"mappings":"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","sourcesContent":["import { Util } from './Util.js';\nimport { SceneContext, HitContext } from './Context.js';\nimport { Konva } from './Global.js';\nimport { Factory } from './Factory.js';\nimport { getNumberValidator } from './Validators.js';\nvar _pixelRatio;\nfunction getDevicePixelRatio() {\n    if (_pixelRatio) {\n        return _pixelRatio;\n    }\n    var canvas = Util.createCanvasElement();\n    var context = canvas.getContext('2d');\n    _pixelRatio = (function () {\n        var devicePixelRatio = Konva._global.devicePixelRatio || 1, backingStoreRatio = context.webkitBackingStorePixelRatio ||\n            context.mozBackingStorePixelRatio ||\n            context.msBackingStorePixelRatio ||\n            context.oBackingStorePixelRatio ||\n            context.backingStorePixelRatio ||\n            1;\n        return devicePixelRatio / backingStoreRatio;\n    })();\n    return _pixelRatio;\n}\nexport class Canvas {\n    constructor(config) {\n        this.pixelRatio = 1;\n        this.width = 0;\n        this.height = 0;\n        this.isCache = false;\n        var conf = config || {};\n        var pixelRatio = conf.pixelRatio || Konva.pixelRatio || getDevicePixelRatio();\n        this.pixelRatio = pixelRatio;\n        this._canvas = Util.createCanvasElement();\n        this._canvas.style.padding = '0';\n        this._canvas.style.margin = '0';\n        this._canvas.style.border = '0';\n        this._canvas.style.background = 'transparent';\n        this._canvas.style.position = 'absolute';\n        this._canvas.style.top = '0';\n        this._canvas.style.left = '0';\n    }\n    getContext() {\n        return this.context;\n    }\n    getPixelRatio() {\n        return this.pixelRatio;\n    }\n    setPixelRatio(pixelRatio) {\n        var previousRatio = this.pixelRatio;\n        this.pixelRatio = pixelRatio;\n        this.setSize(this.getWidth() / previousRatio, this.getHeight() / previousRatio);\n    }\n    setWidth(width) {\n        this.width = this._canvas.width = width * this.pixelRatio;\n        this._canvas.style.width = width + 'px';\n        var pixelRatio = this.pixelRatio, _context = this.getContext()._context;\n        _context.scale(pixelRatio, pixelRatio);\n    }\n    setHeight(height) {\n        this.height = this._canvas.height = height * this.pixelRatio;\n        this._canvas.style.height = height + 'px';\n        var pixelRatio = this.pixelRatio, _context = this.getContext()._context;\n        _context.scale(pixelRatio, pixelRatio);\n    }\n    getWidth() {\n        return this.width;\n    }\n    getHeight() {\n        return this.height;\n    }\n    setSize(width, height) {\n        this.setWidth(width || 0);\n        this.setHeight(height || 0);\n    }\n    toDataURL(mimeType, quality) {\n        try {\n            return this._canvas.toDataURL(mimeType, quality);\n        }\n        catch (e) {\n            try {\n                return this._canvas.toDataURL();\n            }\n            catch (err) {\n                Util.error('Unable to get data URL. ' +\n                    err.message +\n                    ' For more info read https://konvajs.org/docs/posts/Tainted_Canvas.html.');\n                return '';\n            }\n        }\n    }\n}\nFactory.addGetterSetter(Canvas, 'pixelRatio', undefined, getNumberValidator());\nexport class SceneCanvas extends Canvas {\n    constructor(config = { width: 0, height: 0 }) {\n        super(config);\n        this.context = new SceneContext(this);\n        this.setSize(config.width, config.height);\n    }\n}\nexport class HitCanvas extends Canvas {\n    constructor(config = { width: 0, height: 0 }) {\n        super(config);\n        this.hitCanvas = true;\n        this.context = new HitContext(this);\n        this.setSize(config.width, config.height);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}