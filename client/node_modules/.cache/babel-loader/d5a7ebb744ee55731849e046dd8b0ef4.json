{"ast":null,"code":"var _jsxFileName = \"/Users/stevec/Codeclan_Work/Group_Project/SnakesAndLadders/client/src/components/GameBoard.js\";\nimport { useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GameBoard = () => {\n  const width = 500;\n  const height = 500;\n  const numCol = 10;\n  const numRow = 10;\n  const tileSize = 50;\n  let yAxis = (numRow - 1) * tileSize;\n  let xAxis = 0;\n  let board = [];\n  let direction = 1; // const canvasRef = useRef(null)\n  // useEffect(() => {\n  //     const canvas = canvasRef.current;\n  //     canvas.width = width;\n  //     canvas.height = height;\n  //     const context = canvas.getContext('2d')\n  // }, [])\n\n  for (let index = 0; index < numRow * numRow; index++) {\n    // add each tile to the array\n    board.push({\n      xAxis,\n      yAxis,\n      tileSize,\n      index\n    });\n    xAxis = xAxis + tileSize * direction; // reverse direction after 10th tile and move up 1 tile\n\n    if (xAxis >= width || xAxis <= -tileSize) {\n      direction *= -1;\n      xAxis += tileSize * direction;\n      yAxis -= tileSize;\n    }\n  }\n\n  console.log(board);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"display-board\",\n    children: board.map(tile => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tile\",\n        style: {\n          height: `${tileSize}px`\n        },\n        style: {\n          width: `${tileSize}px`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 20\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this) // <canvas>\n  //     ref={canvasRef}\n  // </canvas>\n  ;\n};\n\n_c = GameBoard;\nexport default GameBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"sources":["/Users/stevec/Codeclan_Work/Group_Project/SnakesAndLadders/client/src/components/GameBoard.js"],"names":["useEffect","useRef","GameBoard","width","height","numCol","numRow","tileSize","yAxis","xAxis","board","direction","index","push","console","log","map","tile"],"mappings":";AAAA,SAAQA,SAAR,EAAmBC,MAAnB,QAAgC,OAAhC;;;AACA,MAAMC,SAAS,GAAG,MAAM;AAEpB,QAAMC,KAAK,GAAG,GAAd;AACA,QAAMC,MAAM,GAAG,GAAf;AACA,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,QAAQ,GAAG,EAAjB;AACA,MAAIC,KAAK,GAAG,CAACF,MAAM,GAAE,CAAT,IAAeC,QAA3B;AACA,MAAIE,KAAK,GAAG,CAAZ;AACA,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,SAAS,GAAG,CAAhB,CAVoB,CAWpB;AAGA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGN,MAAM,GAAGA,MAArC,EAA6CM,KAAK,EAAlD,EAAsD;AAClD;AACAF,IAAAA,KAAK,CAACG,IAAN,CAAW;AAACJ,MAAAA,KAAD;AAAQD,MAAAA,KAAR;AAAeD,MAAAA,QAAf;AAAyBK,MAAAA;AAAzB,KAAX;AACAH,IAAAA,KAAK,GAAGA,KAAK,GAAGF,QAAQ,GAAGI,SAA3B,CAHkD,CAIlD;;AACA,QAAIF,KAAK,IAAIN,KAAT,IAAkBM,KAAK,IAAI,CAACF,QAAhC,EAA0C;AACtCI,MAAAA,SAAS,IAAG,CAAC,CAAb;AACAF,MAAAA,KAAK,IAAIF,QAAQ,GAAGI,SAApB;AACAH,MAAAA,KAAK,IAAID,QAAT;AACH;AACJ;;AACDO,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AAGA,sBACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,cAAgCA,KAAK,CAACM,GAAN,CAAUC,IAAI,IAAI;AAC9C,0BAAO;AAAK,QAAA,SAAS,EAAC,MAAf;AAAsB,QAAA,KAAK,EAAE;AAACb,UAAAA,MAAM,EAAG,GAAEG,QAAS;AAArB,SAA7B;AAAwD,QAAA,KAAK,EAAE;AAACJ,UAAAA,KAAK,EAAG,GAAEI,QAAS;AAApB;AAA/D;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAF+B;AAAhC;AAAA;AAAA;AAAA;AAAA,UADJ,CAKI;AACA;AACA;AAPJ;AAUH,CA/CD;;KAAML,S;AAiDN,eAAeA,SAAf","sourcesContent":["import {useEffect, useRef} from \"react\"\nconst GameBoard = () => {\n\n    const width = 500;\n    const height = 500;\n    const numCol = 10;\n    const numRow = 10;\n    const tileSize = 50;\n    let yAxis = (numRow -1 ) * tileSize;\n    let xAxis = 0;\n    let board = [];\n    let direction = 1;\n    // const canvasRef = useRef(null)\n\n\n    // useEffect(() => {\n    //     const canvas = canvasRef.current;\n    //     canvas.width = width;\n    //     canvas.height = height;\n    //     const context = canvas.getContext('2d')\n    // }, [])\n\n    \n\n    for (let index = 0; index < numRow * numRow; index++) {\n        // add each tile to the array\n        board.push({xAxis, yAxis, tileSize, index});\n        xAxis = xAxis + tileSize * direction;\n        // reverse direction after 10th tile and move up 1 tile\n        if (xAxis >= width || xAxis <= -tileSize) {\n            direction*= -1;\n            xAxis += tileSize * direction;\n            yAxis -= tileSize\n        }\n    }\n    console.log(board)\n\n\n    return (\n        <div className=\"display-board\">{board.map(tile => {\n            return <div className=\"tile\" style={{height: `${tileSize}px`}} style={{width: `${tileSize}px`}}></div>\n        })}</div>\n\n        // <canvas>\n        //     ref={canvasRef}\n        // </canvas>\n\n    )\n}\n\nexport default GameBoard;"]},"metadata":{},"sourceType":"module"}