{"ast":null,"code":"import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { Group } from '../Group.js';\nimport { getNumberOrArrayOfNumbersValidator, getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nvar ATTR_CHANGE_LIST = ['fontFamily', 'fontSize', 'fontStyle', 'padding', 'lineHeight', 'text', 'width', 'height'],\n    CHANGE_KONVA = 'Change.konva',\n    NONE = 'none',\n    UP = 'up',\n    RIGHT = 'right',\n    DOWN = 'down',\n    LEFT = 'left',\n    attrChangeListLen = ATTR_CHANGE_LIST.length;\nexport class Label extends Group {\n  constructor(config) {\n    super(config);\n    this.on('add.konva', function (evt) {\n      this._addListeners(evt.child);\n\n      this._sync();\n    });\n  }\n\n  getText() {\n    return this.find('Text')[0];\n  }\n\n  getTag() {\n    return this.find('Tag')[0];\n  }\n\n  _addListeners(text) {\n    var that = this,\n        n;\n\n    var func = function () {\n      that._sync();\n    };\n\n    for (n = 0; n < attrChangeListLen; n++) {\n      text.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, func);\n    }\n  }\n\n  getWidth() {\n    return this.getText().width();\n  }\n\n  getHeight() {\n    return this.getText().height();\n  }\n\n  _sync() {\n    var text = this.getText(),\n        tag = this.getTag(),\n        width,\n        height,\n        pointerDirection,\n        pointerWidth,\n        x,\n        y,\n        pointerHeight;\n\n    if (text && tag) {\n      width = text.width();\n      height = text.height();\n      pointerDirection = tag.pointerDirection();\n      pointerWidth = tag.pointerWidth();\n      pointerHeight = tag.pointerHeight();\n      x = 0;\n      y = 0;\n\n      switch (pointerDirection) {\n        case UP:\n          x = width / 2;\n          y = -1 * pointerHeight;\n          break;\n\n        case RIGHT:\n          x = width + pointerWidth;\n          y = height / 2;\n          break;\n\n        case DOWN:\n          x = width / 2;\n          y = height + pointerHeight;\n          break;\n\n        case LEFT:\n          x = -1 * pointerWidth;\n          y = height / 2;\n          break;\n      }\n\n      tag.setAttrs({\n        x: -1 * x,\n        y: -1 * y,\n        width: width,\n        height: height\n      });\n      text.setAttrs({\n        x: -1 * x,\n        y: -1 * y\n      });\n    }\n  }\n\n}\nLabel.prototype.className = 'Label';\n\n_registerNode(Label);\n\nexport class Tag extends Shape {\n  _sceneFunc(context) {\n    var width = this.width(),\n        height = this.height(),\n        pointerDirection = this.pointerDirection(),\n        pointerWidth = this.pointerWidth(),\n        pointerHeight = this.pointerHeight(),\n        cornerRadius = this.cornerRadius();\n    let topLeft = 0;\n    let topRight = 0;\n    let bottomLeft = 0;\n    let bottomRight = 0;\n\n    if (typeof cornerRadius === 'number') {\n      topLeft = topRight = bottomLeft = bottomRight = Math.min(cornerRadius, width / 2, height / 2);\n    } else {\n      topLeft = Math.min(cornerRadius[0] || 0, width / 2, height / 2);\n      topRight = Math.min(cornerRadius[1] || 0, width / 2, height / 2);\n      bottomRight = Math.min(cornerRadius[2] || 0, width / 2, height / 2);\n      bottomLeft = Math.min(cornerRadius[3] || 0, width / 2, height / 2);\n    }\n\n    context.beginPath();\n    context.moveTo(topLeft, 0);\n\n    if (pointerDirection === UP) {\n      context.lineTo((width - pointerWidth) / 2, 0);\n      context.lineTo(width / 2, -1 * pointerHeight);\n      context.lineTo((width + pointerWidth) / 2, 0);\n    }\n\n    context.lineTo(width - topRight, 0);\n    context.arc(width - topRight, topRight, topRight, Math.PI * 3 / 2, 0, false);\n\n    if (pointerDirection === RIGHT) {\n      context.lineTo(width, (height - pointerHeight) / 2);\n      context.lineTo(width + pointerWidth, height / 2);\n      context.lineTo(width, (height + pointerHeight) / 2);\n    }\n\n    context.lineTo(width, height - bottomRight);\n    context.arc(width - bottomRight, height - bottomRight, bottomRight, 0, Math.PI / 2, false);\n\n    if (pointerDirection === DOWN) {\n      context.lineTo((width + pointerWidth) / 2, height);\n      context.lineTo(width / 2, height + pointerHeight);\n      context.lineTo((width - pointerWidth) / 2, height);\n    }\n\n    context.lineTo(bottomLeft, height);\n    context.arc(bottomLeft, height - bottomLeft, bottomLeft, Math.PI / 2, Math.PI, false);\n\n    if (pointerDirection === LEFT) {\n      context.lineTo(0, (height + pointerHeight) / 2);\n      context.lineTo(-1 * pointerWidth, height / 2);\n      context.lineTo(0, (height - pointerHeight) / 2);\n    }\n\n    context.lineTo(0, topLeft);\n    context.arc(topLeft, topLeft, topLeft, Math.PI, Math.PI * 3 / 2, false);\n    context.closePath();\n    context.fillStrokeShape(this);\n  }\n\n  getSelfRect() {\n    var x = 0,\n        y = 0,\n        pointerWidth = this.pointerWidth(),\n        pointerHeight = this.pointerHeight(),\n        direction = this.pointerDirection(),\n        width = this.width(),\n        height = this.height();\n\n    if (direction === UP) {\n      y -= pointerHeight;\n      height += pointerHeight;\n    } else if (direction === DOWN) {\n      height += pointerHeight;\n    } else if (direction === LEFT) {\n      x -= pointerWidth * 1.5;\n      width += pointerWidth;\n    } else if (direction === RIGHT) {\n      width += pointerWidth * 1.5;\n    }\n\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    };\n  }\n\n}\nTag.prototype.className = 'Tag';\n\n_registerNode(Tag);\n\nFactory.addGetterSetter(Tag, 'pointerDirection', NONE);\nFactory.addGetterSetter(Tag, 'pointerWidth', 0, getNumberValidator());\nFactory.addGetterSetter(Tag, 'pointerHeight', 0, getNumberValidator());\nFactory.addGetterSetter(Tag, 'cornerRadius', 0, getNumberOrArrayOfNumbersValidator(4));","map":{"version":3,"sources":["/Users/stevec/Codeclan_Work/Group_Project/SnakesAndLadders/client/node_modules/konva/lib/shapes/Label.js"],"names":["Factory","Shape","Group","getNumberOrArrayOfNumbersValidator","getNumberValidator","_registerNode","ATTR_CHANGE_LIST","CHANGE_KONVA","NONE","UP","RIGHT","DOWN","LEFT","attrChangeListLen","length","Label","constructor","config","on","evt","_addListeners","child","_sync","getText","find","getTag","text","that","n","func","getWidth","width","getHeight","height","tag","pointerDirection","pointerWidth","x","y","pointerHeight","setAttrs","prototype","className","Tag","_sceneFunc","context","cornerRadius","topLeft","topRight","bottomLeft","bottomRight","Math","min","beginPath","moveTo","lineTo","arc","PI","closePath","fillStrokeShape","getSelfRect","direction","addGetterSetter"],"mappings":"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","sourcesContent":["import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { Group } from '../Group.js';\nimport { getNumberOrArrayOfNumbersValidator, getNumberValidator, } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nvar ATTR_CHANGE_LIST = [\n    'fontFamily',\n    'fontSize',\n    'fontStyle',\n    'padding',\n    'lineHeight',\n    'text',\n    'width',\n    'height',\n], CHANGE_KONVA = 'Change.konva', NONE = 'none', UP = 'up', RIGHT = 'right', DOWN = 'down', LEFT = 'left', attrChangeListLen = ATTR_CHANGE_LIST.length;\nexport class Label extends Group {\n    constructor(config) {\n        super(config);\n        this.on('add.konva', function (evt) {\n            this._addListeners(evt.child);\n            this._sync();\n        });\n    }\n    getText() {\n        return this.find('Text')[0];\n    }\n    getTag() {\n        return this.find('Tag')[0];\n    }\n    _addListeners(text) {\n        var that = this, n;\n        var func = function () {\n            that._sync();\n        };\n        for (n = 0; n < attrChangeListLen; n++) {\n            text.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, func);\n        }\n    }\n    getWidth() {\n        return this.getText().width();\n    }\n    getHeight() {\n        return this.getText().height();\n    }\n    _sync() {\n        var text = this.getText(), tag = this.getTag(), width, height, pointerDirection, pointerWidth, x, y, pointerHeight;\n        if (text && tag) {\n            width = text.width();\n            height = text.height();\n            pointerDirection = tag.pointerDirection();\n            pointerWidth = tag.pointerWidth();\n            pointerHeight = tag.pointerHeight();\n            x = 0;\n            y = 0;\n            switch (pointerDirection) {\n                case UP:\n                    x = width / 2;\n                    y = -1 * pointerHeight;\n                    break;\n                case RIGHT:\n                    x = width + pointerWidth;\n                    y = height / 2;\n                    break;\n                case DOWN:\n                    x = width / 2;\n                    y = height + pointerHeight;\n                    break;\n                case LEFT:\n                    x = -1 * pointerWidth;\n                    y = height / 2;\n                    break;\n            }\n            tag.setAttrs({\n                x: -1 * x,\n                y: -1 * y,\n                width: width,\n                height: height,\n            });\n            text.setAttrs({\n                x: -1 * x,\n                y: -1 * y,\n            });\n        }\n    }\n}\nLabel.prototype.className = 'Label';\n_registerNode(Label);\nexport class Tag extends Shape {\n    _sceneFunc(context) {\n        var width = this.width(), height = this.height(), pointerDirection = this.pointerDirection(), pointerWidth = this.pointerWidth(), pointerHeight = this.pointerHeight(), cornerRadius = this.cornerRadius();\n        let topLeft = 0;\n        let topRight = 0;\n        let bottomLeft = 0;\n        let bottomRight = 0;\n        if (typeof cornerRadius === 'number') {\n            topLeft = topRight = bottomLeft = bottomRight = Math.min(cornerRadius, width / 2, height / 2);\n        }\n        else {\n            topLeft = Math.min(cornerRadius[0] || 0, width / 2, height / 2);\n            topRight = Math.min(cornerRadius[1] || 0, width / 2, height / 2);\n            bottomRight = Math.min(cornerRadius[2] || 0, width / 2, height / 2);\n            bottomLeft = Math.min(cornerRadius[3] || 0, width / 2, height / 2);\n        }\n        context.beginPath();\n        context.moveTo(topLeft, 0);\n        if (pointerDirection === UP) {\n            context.lineTo((width - pointerWidth) / 2, 0);\n            context.lineTo(width / 2, -1 * pointerHeight);\n            context.lineTo((width + pointerWidth) / 2, 0);\n        }\n        context.lineTo(width - topRight, 0);\n        context.arc(width - topRight, topRight, topRight, (Math.PI * 3) / 2, 0, false);\n        if (pointerDirection === RIGHT) {\n            context.lineTo(width, (height - pointerHeight) / 2);\n            context.lineTo(width + pointerWidth, height / 2);\n            context.lineTo(width, (height + pointerHeight) / 2);\n        }\n        context.lineTo(width, height - bottomRight);\n        context.arc(width - bottomRight, height - bottomRight, bottomRight, 0, Math.PI / 2, false);\n        if (pointerDirection === DOWN) {\n            context.lineTo((width + pointerWidth) / 2, height);\n            context.lineTo(width / 2, height + pointerHeight);\n            context.lineTo((width - pointerWidth) / 2, height);\n        }\n        context.lineTo(bottomLeft, height);\n        context.arc(bottomLeft, height - bottomLeft, bottomLeft, Math.PI / 2, Math.PI, false);\n        if (pointerDirection === LEFT) {\n            context.lineTo(0, (height + pointerHeight) / 2);\n            context.lineTo(-1 * pointerWidth, height / 2);\n            context.lineTo(0, (height - pointerHeight) / 2);\n        }\n        context.lineTo(0, topLeft);\n        context.arc(topLeft, topLeft, topLeft, Math.PI, (Math.PI * 3) / 2, false);\n        context.closePath();\n        context.fillStrokeShape(this);\n    }\n    getSelfRect() {\n        var x = 0, y = 0, pointerWidth = this.pointerWidth(), pointerHeight = this.pointerHeight(), direction = this.pointerDirection(), width = this.width(), height = this.height();\n        if (direction === UP) {\n            y -= pointerHeight;\n            height += pointerHeight;\n        }\n        else if (direction === DOWN) {\n            height += pointerHeight;\n        }\n        else if (direction === LEFT) {\n            x -= pointerWidth * 1.5;\n            width += pointerWidth;\n        }\n        else if (direction === RIGHT) {\n            width += pointerWidth * 1.5;\n        }\n        return {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n        };\n    }\n}\nTag.prototype.className = 'Tag';\n_registerNode(Tag);\nFactory.addGetterSetter(Tag, 'pointerDirection', NONE);\nFactory.addGetterSetter(Tag, 'pointerWidth', 0, getNumberValidator());\nFactory.addGetterSetter(Tag, 'pointerHeight', 0, getNumberValidator());\nFactory.addGetterSetter(Tag, 'cornerRadius', 0, getNumberOrArrayOfNumbersValidator(4));\n"]},"metadata":{},"sourceType":"module"}