{"ast":null,"code":"var _jsxFileName = \"/Users/stevec/Codeclan_Work/Group_Project/SnakesAndLadders/client/src/components/Canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Canvas = props => {\n  _s();\n\n  const width = 500;\n  const height = 500;\n  const numCol = 10;\n  const numRow = 10;\n  const tileSize = 50;\n  let yAxis = (numRow - 1) * tileSize;\n  let xAxis = 0;\n  let board = [];\n  let direction = 1;\n  const canvasRef = useRef([]);\n\n  const draw = ctx => {\n    ctx.fillStyle = '#000000';\n    ctx.beginPath();\n    ctx.arc(50, 100, 20, 0, 2 * Math.PI);\n    ctx.fillStyle = '#00000';\n    ctx.fill();\n  };\n\n  for (let index = 0; index < numRow * numRow; index++) {\n    // add each tile to the array\n    board.push({\n      xAxis,\n      yAxis,\n      tileSize,\n      index\n    });\n    xAxis = xAxis + tileSize * direction; // reverse direction after 10th tile and move up 1 tile\n\n    if (xAxis >= width || xAxis <= -tileSize) {\n      direction *= -1;\n      xAxis += tileSize * direction;\n      yAxis -= tileSize;\n    }\n  }\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d'); //Our first draw\n\n    draw(context); // context.fillStyle = '#ebebeb'\n    // context.fillRect(0, 0, context.canvas.width, context.canvas.height)\n  }, [draw]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/stevec/Codeclan_Work/Group_Project/SnakesAndLadders/client/src/components/Canvas.js"],"names":["React","useRef","useEffect","Canvas","props","width","height","numCol","numRow","tileSize","yAxis","xAxis","board","direction","canvasRef","draw","ctx","fillStyle","beginPath","arc","Math","PI","fill","index","push","canvas","current","context","getContext"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;;;AAEA,MAAMC,MAAM,GAAGC,KAAK,IAAI;AAAA;;AAExB,QAAMC,KAAK,GAAG,GAAd;AACI,QAAMC,MAAM,GAAG,GAAf;AACA,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,QAAQ,GAAG,EAAjB;AACA,MAAIC,KAAK,GAAG,CAACF,MAAM,GAAE,CAAT,IAAeC,QAA3B;AACA,MAAIE,KAAK,GAAG,CAAZ;AACA,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,SAAS,GAAG,CAAhB;AACF,QAAMC,SAAS,GAAGb,MAAM,CAAC,EAAD,CAAxB;;AAEA,QAAMc,IAAI,GAAGC,GAAG,IAAI;AAClBA,IAAAA,GAAG,CAACC,SAAJ,GAAgB,SAAhB;AACAD,IAAAA,GAAG,CAACE,SAAJ;AACAF,IAAAA,GAAG,CAACG,GAAJ,CAAQ,EAAR,EAAY,GAAZ,EAAiB,EAAjB,EAAqB,CAArB,EAAwB,IAAEC,IAAI,CAACC,EAA/B;AACAL,IAAAA,GAAG,CAACC,SAAJ,GAAgB,QAAhB;AACAD,IAAAA,GAAG,CAACM,IAAJ;AACD,GAND;;AAQA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGf,MAAM,GAAGA,MAArC,EAA6Ce,KAAK,EAAlD,EAAsD;AACpD;AACAX,IAAAA,KAAK,CAACY,IAAN,CAAW;AAACb,MAAAA,KAAD;AAAQD,MAAAA,KAAR;AAAeD,MAAAA,QAAf;AAAyBc,MAAAA;AAAzB,KAAX;AACAZ,IAAAA,KAAK,GAAGA,KAAK,GAAGF,QAAQ,GAAGI,SAA3B,CAHoD,CAIpD;;AACA,QAAIF,KAAK,IAAIN,KAAT,IAAkBM,KAAK,IAAI,CAACF,QAAhC,EAA0C;AACtCI,MAAAA,SAAS,IAAG,CAAC,CAAb;AACAF,MAAAA,KAAK,IAAIF,QAAQ,GAAGI,SAApB;AACAH,MAAAA,KAAK,IAAID,QAAT;AACH;AACJ;;AACCP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMuB,MAAM,GAAGX,SAAS,CAACY,OAAzB;AACA,UAAMC,OAAO,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAhB,CAFc,CAGd;;AACAb,IAAAA,IAAI,CAACY,OAAD,CAAJ,CAJc,CAKd;AACA;AACD,GAPQ,EAON,CAACZ,IAAD,CAPM,CAAT;AASA,sBAAO;AAAQ,IAAA,GAAG,EAAED,SAAb;AAAA,OAA4BV;AAA5B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA1CD;;GAAMD,M;;KAAAA,M;AA4CN,eAAeA,MAAf","sourcesContent":["import React, { useRef, useEffect } from 'react'\n\nconst Canvas = props => {\n  \nconst width = 500;\n    const height = 500;\n    const numCol = 10;\n    const numRow = 10;\n    const tileSize = 50;\n    let yAxis = (numRow -1 ) * tileSize;\n    let xAxis = 0;\n    let board = [];\n    let direction = 1;\n  const canvasRef = useRef([])\n\n  const draw = ctx => {\n    ctx.fillStyle = '#000000'\n    ctx.beginPath()\n    ctx.arc(50, 100, 20, 0, 2*Math.PI)\n    ctx.fillStyle = '#00000'\n    ctx.fill()\n  }\n\n  for (let index = 0; index < numRow * numRow; index++) {\n    // add each tile to the array\n    board.push({xAxis, yAxis, tileSize, index});\n    xAxis = xAxis + tileSize * direction;\n    // reverse direction after 10th tile and move up 1 tile\n    if (xAxis >= width || xAxis <= -tileSize) {\n        direction*= -1;\n        xAxis += tileSize * direction;\n        yAxis -= tileSize\n    }\n}\n  useEffect(() => {\n    const canvas = canvasRef.current\n    const context = canvas.getContext('2d')\n    //Our first draw\n    draw(context)\n    // context.fillStyle = '#ebebeb'\n    // context.fillRect(0, 0, context.canvas.width, context.canvas.height)\n  }, [draw])\n  \n  return <canvas ref={canvasRef} {...props}/>\n}\n\nexport default Canvas"]},"metadata":{},"sourceType":"module"}