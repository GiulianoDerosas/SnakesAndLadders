{"ast":null,"code":"var _jsxFileName = \"/Users/giulianoderosas/codeclan_work/week_08/SnakesAndLadders/client/src/components/GameBoard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst GameBoard = () => {\n  _s();\n\n  const width = 500;\n  const height = 500;\n  const numCol = 10;\n  const numRow = 10;\n  const tileSize = 50;\n  let yAxis = (numRow - 1) * tileSize;\n  let xAxis = 0;\n  let board = [];\n  let direction = 1;\n  const canvasRef = useRef(null);\n\n  const draw = ctx => {\n    ctx.fillStyle = '#000000';\n    ctx.beginPath();\n    ctx.arc(50, 100, 20, 0, 2 * Math.PI);\n    ctx.fill();\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    draw(context);\n  }, [draw]);\n  useEffect(() => {});\n\n  for (let index = 0; index < numRow * numRow; index++) {\n    // add each tile to the array\n    board.push({\n      xAxis,\n      yAxis,\n      tileSize,\n      index\n    });\n    xAxis = xAxis + tileSize * direction; // reverse direction after 10th tile and move up 1 tile\n\n    if (xAxis >= width || xAxis <= -tileSize) {\n      direction *= -1;\n      xAxis += tileSize * direction;\n      yAxis -= tileSize;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        border: '1px solid'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(GameBoard, \"1O11hef6JMAr7xpSnL0aZ5Ib60Q=\");\n\n_c = GameBoard;\nexport default GameBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"sources":["/Users/giulianoderosas/codeclan_work/week_08/SnakesAndLadders/client/src/components/GameBoard.js"],"names":["React","useEffect","useRef","GameBoard","width","height","numCol","numRow","tileSize","yAxis","xAxis","board","direction","canvasRef","draw","ctx","fillStyle","beginPath","arc","Math","PI","fill","canvas","current","context","getContext","index","push","border"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,QAAuC,OAAvC;;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAEpB,QAAMC,KAAK,GAAG,GAAd;AACA,QAAMC,MAAM,GAAG,GAAf;AACA,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,QAAQ,GAAG,EAAjB;AACA,MAAIC,KAAK,GAAG,CAACF,MAAM,GAAE,CAAT,IAAeC,QAA3B;AACA,MAAIE,KAAK,GAAG,CAAZ;AACA,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,SAAS,GAAG,CAAhB;AAEA,QAAMC,SAAS,GAAGX,MAAM,CAAC,IAAD,CAAxB;;AAEA,QAAMY,IAAI,GAAGC,GAAG,IAAI;AAClBA,IAAAA,GAAG,CAACC,SAAJ,GAAgB,SAAhB;AACAD,IAAAA,GAAG,CAACE,SAAJ;AACAF,IAAAA,GAAG,CAACG,GAAJ,CAAQ,EAAR,EAAY,GAAZ,EAAiB,EAAjB,EAAqB,CAArB,EAAwB,IAAEC,IAAI,CAACC,EAA/B;AACAL,IAAAA,GAAG,CAACM,IAAJ;AACD,GALD;;AAOApB,EAAAA,SAAS,CAAC,MAAM;AAEd,UAAMqB,MAAM,GAAGT,SAAS,CAACU,OAAzB;AACA,UAAMC,OAAO,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAhB;AACAX,IAAAA,IAAI,CAACU,OAAD,CAAJ;AACD,GALQ,EAKN,CAACV,IAAD,CALM,CAAT;AAQAb,EAAAA,SAAS,CAAC,MAAK,CACd,CADQ,CAAT;;AAEA,OAAK,IAAIyB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGnB,MAAM,GAAGA,MAArC,EAA6CmB,KAAK,EAAlD,EAAsD;AAClD;AACAf,IAAAA,KAAK,CAACgB,IAAN,CAAW;AAACjB,MAAAA,KAAD;AAAQD,MAAAA,KAAR;AAAeD,MAAAA,QAAf;AAAyBkB,MAAAA;AAAzB,KAAX;AACAhB,IAAAA,KAAK,GAAGA,KAAK,GAAGF,QAAQ,GAAGI,SAA3B,CAHkD,CAIlD;;AACA,QAAIF,KAAK,IAAIN,KAAT,IAAkBM,KAAK,IAAI,CAACF,QAAhC,EAA0C;AACtCI,MAAAA,SAAS,IAAG,CAAC,CAAb;AACAF,MAAAA,KAAK,IAAIF,QAAQ,GAAGI,SAApB;AACAH,MAAAA,KAAK,IAAID,QAAT;AACH;AACJ;;AAGD,sBACI;AAAA,2BACA;AAAQ,MAAA,GAAG,EAAEK,SAAb;AAAwB,MAAA,KAAK,EAAE;AAACe,QAAAA,MAAM,EAAE;AAAT;AAA/B;AAAA;AAAA;AAAA;AAAA;AADA,mBADJ;AAKH,CAjDD;;GAAMzB,S;;KAAAA,S;AAkDN,eAAeA,SAAf","sourcesContent":["import React, {useEffect, useRef} from 'react'\n\nconst GameBoard = () => {\n\n    const width = 500;\n    const height = 500;\n    const numCol = 10;\n    const numRow = 10;\n    const tileSize = 50;\n    let yAxis = (numRow -1 ) * tileSize;\n    let xAxis = 0;\n    let board = [];\n    let direction = 1;\n\n    const canvasRef = useRef(null)\n  \n    const draw = ctx => {\n      ctx.fillStyle = '#000000'\n      ctx.beginPath()\n      ctx.arc(50, 100, 20, 0, 2*Math.PI)\n      ctx.fill()\n    }\n    \n    useEffect(() => {\n      \n      const canvas = canvasRef.current\n      const context = canvas.getContext('2d')\n      draw(context)\n    }, [draw])\n\n\n    useEffect(()=> {\n    })\n    for (let index = 0; index < numRow * numRow; index++) {\n        // add each tile to the array\n        board.push({xAxis, yAxis, tileSize, index});\n        xAxis = xAxis + tileSize * direction;\n        // reverse direction after 10th tile and move up 1 tile\n        if (xAxis >= width || xAxis <= -tileSize) {\n            direction*= -1;\n            xAxis += tileSize * direction;\n            yAxis -= tileSize\n        }\n    }\n\n\n    return (\n        <>\n        <canvas ref={canvasRef} style={{border: '1px solid'}}></canvas>\n        </>\n    )\n}\nexport default GameBoard;"]},"metadata":{},"sourceType":"module"}