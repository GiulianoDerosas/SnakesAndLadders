{"ast":null,"code":"import { Util, Transform } from '../Util.js';\nimport { Factory } from '../Factory.js';\nimport { Node } from '../Node.js';\nimport { Shape } from '../Shape.js';\nimport { Rect } from './Rect.js';\nimport { Group } from '../Group.js';\nimport { Konva } from '../Global.js';\nimport { getBooleanValidator, getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nvar EVENTS_NAME = 'tr-konva';\nvar ATTR_CHANGE_LIST = ['resizeEnabledChange', 'rotateAnchorOffsetChange', 'rotateEnabledChange', 'enabledAnchorsChange', 'anchorSizeChange', 'borderEnabledChange', 'borderStrokeChange', 'borderStrokeWidthChange', 'borderDashChange', 'anchorStrokeChange', 'anchorStrokeWidthChange', 'anchorFillChange', 'anchorCornerRadiusChange', 'ignoreStrokeChange'].map(e => e + `.${EVENTS_NAME}`).join(' ');\nvar NODES_RECT = 'nodesRect';\nvar TRANSFORM_CHANGE_STR = ['widthChange', 'heightChange', 'scaleXChange', 'scaleYChange', 'skewXChange', 'skewYChange', 'rotationChange', 'offsetXChange', 'offsetYChange', 'transformsEnabledChange', 'strokeWidthChange'].map(e => e + `.${EVENTS_NAME}`).join(' ');\nvar ANGLES = {\n  'top-left': -45,\n  'top-center': 0,\n  'top-right': 45,\n  'middle-right': -90,\n  'middle-left': 90,\n  'bottom-left': -135,\n  'bottom-center': 180,\n  'bottom-right': 135\n};\nconst TOUCH_DEVICE = ('ontouchstart' in Konva._global);\n\nfunction getCursor(anchorName, rad) {\n  if (anchorName === 'rotater') {\n    return 'crosshair';\n  }\n\n  rad += Util.degToRad(ANGLES[anchorName] || 0);\n  var angle = (Util.radToDeg(rad) % 360 + 360) % 360;\n\n  if (Util._inRange(angle, 315 + 22.5, 360) || Util._inRange(angle, 0, 22.5)) {\n    return 'ns-resize';\n  } else if (Util._inRange(angle, 45 - 22.5, 45 + 22.5)) {\n    return 'nesw-resize';\n  } else if (Util._inRange(angle, 90 - 22.5, 90 + 22.5)) {\n    return 'ew-resize';\n  } else if (Util._inRange(angle, 135 - 22.5, 135 + 22.5)) {\n    return 'nwse-resize';\n  } else if (Util._inRange(angle, 180 - 22.5, 180 + 22.5)) {\n    return 'ns-resize';\n  } else if (Util._inRange(angle, 225 - 22.5, 225 + 22.5)) {\n    return 'nesw-resize';\n  } else if (Util._inRange(angle, 270 - 22.5, 270 + 22.5)) {\n    return 'ew-resize';\n  } else if (Util._inRange(angle, 315 - 22.5, 315 + 22.5)) {\n    return 'nwse-resize';\n  } else {\n    Util.error('Transformer has unknown angle for cursor detection: ' + angle);\n    return 'pointer';\n  }\n}\n\nvar ANCHORS_NAMES = ['top-left', 'top-center', 'top-right', 'middle-right', 'middle-left', 'bottom-left', 'bottom-center', 'bottom-right'];\nvar MAX_SAFE_INTEGER = 100000000;\n\nfunction getCenter(shape) {\n  return {\n    x: shape.x + shape.width / 2 * Math.cos(shape.rotation) + shape.height / 2 * Math.sin(-shape.rotation),\n    y: shape.y + shape.height / 2 * Math.cos(shape.rotation) + shape.width / 2 * Math.sin(shape.rotation)\n  };\n}\n\nfunction rotateAroundPoint(shape, angleRad, point) {\n  const x = point.x + (shape.x - point.x) * Math.cos(angleRad) - (shape.y - point.y) * Math.sin(angleRad);\n  const y = point.y + (shape.x - point.x) * Math.sin(angleRad) + (shape.y - point.y) * Math.cos(angleRad);\n  return Object.assign(Object.assign({}, shape), {\n    rotation: shape.rotation + angleRad,\n    x,\n    y\n  });\n}\n\nfunction rotateAroundCenter(shape, deltaRad) {\n  const center = getCenter(shape);\n  return rotateAroundPoint(shape, deltaRad, center);\n}\n\nfunction getSnap(snaps, newRotationRad, tol) {\n  let snapped = newRotationRad;\n\n  for (let i = 0; i < snaps.length; i++) {\n    const angle = Konva.getAngle(snaps[i]);\n    const absDiff = Math.abs(angle - newRotationRad) % (Math.PI * 2);\n    const dif = Math.min(absDiff, Math.PI * 2 - absDiff);\n\n    if (dif < tol) {\n      snapped = angle;\n    }\n  }\n\n  return snapped;\n}\n\nexport class Transformer extends Group {\n  constructor(config) {\n    super(config);\n    this._transforming = false;\n\n    this._createElements();\n\n    this._handleMouseMove = this._handleMouseMove.bind(this);\n    this._handleMouseUp = this._handleMouseUp.bind(this);\n    this.update = this.update.bind(this);\n    this.on(ATTR_CHANGE_LIST, this.update);\n\n    if (this.getNode()) {\n      this.update();\n    }\n  }\n\n  attachTo(node) {\n    this.setNode(node);\n    return this;\n  }\n\n  setNode(node) {\n    Util.warn('tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead.');\n    return this.setNodes([node]);\n  }\n\n  getNode() {\n    return this._nodes && this._nodes[0];\n  }\n\n  setNodes(nodes = []) {\n    if (this._nodes && this._nodes.length) {\n      this.detach();\n    }\n\n    this._nodes = nodes;\n\n    if (nodes.length === 1) {\n      this.rotation(nodes[0].getAbsoluteRotation());\n    } else {\n      this.rotation(0);\n    }\n\n    this._nodes.forEach(node => {\n      const additionalEvents = node._attrsAffectingSize.map(prop => prop + 'Change.' + EVENTS_NAME).join(' ');\n\n      const onChange = () => {\n        if (this.nodes().length === 1) {\n          this.rotation(this.nodes()[0].getAbsoluteRotation());\n        }\n\n        this._resetTransformCache();\n\n        if (!this._transforming && !this.isDragging()) {\n          this.update();\n        }\n      };\n\n      node.on(additionalEvents, onChange);\n      node.on(TRANSFORM_CHANGE_STR, onChange);\n      node.on(`absoluteTransformChange.${EVENTS_NAME}`, onChange);\n      node.on(`xChange.${EVENTS_NAME} yChange.${EVENTS_NAME}`, onChange);\n\n      this._proxyDrag(node);\n    });\n\n    this._resetTransformCache();\n\n    var elementsCreated = !!this.findOne('.top-left');\n\n    if (elementsCreated) {\n      this.update();\n    }\n\n    return this;\n  }\n\n  _proxyDrag(node) {\n    let lastPos;\n    node.on(`dragstart.${EVENTS_NAME}`, e => {\n      lastPos = node.getAbsolutePosition();\n\n      if (!this.isDragging() && node !== this.findOne('.back')) {\n        this.startDrag(e, false);\n      }\n    });\n    node.on(`dragmove.${EVENTS_NAME}`, e => {\n      if (!lastPos) {\n        return;\n      }\n\n      const abs = node.getAbsolutePosition();\n      const dx = abs.x - lastPos.x;\n      const dy = abs.y - lastPos.y;\n      this.nodes().forEach(otherNode => {\n        if (otherNode === node) {\n          return;\n        }\n\n        if (otherNode.isDragging()) {\n          return;\n        }\n\n        const otherAbs = otherNode.getAbsolutePosition();\n        otherNode.setAbsolutePosition({\n          x: otherAbs.x + dx,\n          y: otherAbs.y + dy\n        });\n        otherNode.startDrag(e);\n      });\n      lastPos = null;\n    });\n  }\n\n  getNodes() {\n    return this._nodes || [];\n  }\n\n  getActiveAnchor() {\n    return this._movingAnchorName;\n  }\n\n  detach() {\n    if (this._nodes) {\n      this._nodes.forEach(node => {\n        node.off('.' + EVENTS_NAME);\n      });\n    }\n\n    this._nodes = [];\n\n    this._resetTransformCache();\n  }\n\n  _resetTransformCache() {\n    this._clearCache(NODES_RECT);\n\n    this._clearCache('transform');\n\n    this._clearSelfAndDescendantCache('absoluteTransform');\n  }\n\n  _getNodeRect() {\n    return this._getCache(NODES_RECT, this.__getNodeRect);\n  }\n\n  __getNodeShape(node, rot = this.rotation(), relative) {\n    var rect = node.getClientRect({\n      skipTransform: true,\n      skipShadow: true,\n      skipStroke: this.ignoreStroke()\n    });\n    var absScale = node.getAbsoluteScale(relative);\n    var absPos = node.getAbsolutePosition(relative);\n    var dx = rect.x * absScale.x - node.offsetX() * absScale.x;\n    var dy = rect.y * absScale.y - node.offsetY() * absScale.y;\n    const rotation = (Konva.getAngle(node.getAbsoluteRotation()) + Math.PI * 2) % (Math.PI * 2);\n    const box = {\n      x: absPos.x + dx * Math.cos(rotation) + dy * Math.sin(-rotation),\n      y: absPos.y + dy * Math.cos(rotation) + dx * Math.sin(rotation),\n      width: rect.width * absScale.x,\n      height: rect.height * absScale.y,\n      rotation: rotation\n    };\n    return rotateAroundPoint(box, -Konva.getAngle(rot), {\n      x: 0,\n      y: 0\n    });\n  }\n\n  __getNodeRect() {\n    var node = this.getNode();\n\n    if (!node) {\n      return {\n        x: -MAX_SAFE_INTEGER,\n        y: -MAX_SAFE_INTEGER,\n        width: 0,\n        height: 0,\n        rotation: 0\n      };\n    }\n\n    const totalPoints = [];\n    this.nodes().map(node => {\n      const box = node.getClientRect({\n        skipTransform: true,\n        skipShadow: true,\n        skipStroke: this.ignoreStroke()\n      });\n      var points = [{\n        x: box.x,\n        y: box.y\n      }, {\n        x: box.x + box.width,\n        y: box.y\n      }, {\n        x: box.x + box.width,\n        y: box.y + box.height\n      }, {\n        x: box.x,\n        y: box.y + box.height\n      }];\n      var trans = node.getAbsoluteTransform();\n      points.forEach(function (point) {\n        var transformed = trans.point(point);\n        totalPoints.push(transformed);\n      });\n    });\n    const tr = new Transform();\n    tr.rotate(-Konva.getAngle(this.rotation()));\n    var minX, minY, maxX, maxY;\n    totalPoints.forEach(function (point) {\n      var transformed = tr.point(point);\n\n      if (minX === undefined) {\n        minX = maxX = transformed.x;\n        minY = maxY = transformed.y;\n      }\n\n      minX = Math.min(minX, transformed.x);\n      minY = Math.min(minY, transformed.y);\n      maxX = Math.max(maxX, transformed.x);\n      maxY = Math.max(maxY, transformed.y);\n    });\n    tr.invert();\n    const p = tr.point({\n      x: minX,\n      y: minY\n    });\n    return {\n      x: p.x,\n      y: p.y,\n      width: maxX - minX,\n      height: maxY - minY,\n      rotation: Konva.getAngle(this.rotation())\n    };\n  }\n\n  getX() {\n    return this._getNodeRect().x;\n  }\n\n  getY() {\n    return this._getNodeRect().y;\n  }\n\n  getWidth() {\n    return this._getNodeRect().width;\n  }\n\n  getHeight() {\n    return this._getNodeRect().height;\n  }\n\n  _createElements() {\n    this._createBack();\n\n    ANCHORS_NAMES.forEach(function (name) {\n      this._createAnchor(name);\n    }.bind(this));\n\n    this._createAnchor('rotater');\n  }\n\n  _createAnchor(name) {\n    var anchor = new Rect({\n      stroke: 'rgb(0, 161, 255)',\n      fill: 'white',\n      strokeWidth: 1,\n      name: name + ' _anchor',\n      dragDistance: 0,\n      draggable: true,\n      hitStrokeWidth: TOUCH_DEVICE ? 10 : 'auto'\n    });\n    var self = this;\n    anchor.on('mousedown touchstart', function (e) {\n      self._handleMouseDown(e);\n    });\n    anchor.on('dragstart', e => {\n      anchor.stopDrag();\n      e.cancelBubble = true;\n    });\n    anchor.on('dragend', e => {\n      e.cancelBubble = true;\n    });\n    anchor.on('mouseenter', () => {\n      var rad = Konva.getAngle(this.rotation());\n      var cursor = getCursor(name, rad);\n      anchor.getStage().content && (anchor.getStage().content.style.cursor = cursor);\n      this._cursorChange = true;\n    });\n    anchor.on('mouseout', () => {\n      anchor.getStage().content && (anchor.getStage().content.style.cursor = '');\n      this._cursorChange = false;\n    });\n    this.add(anchor);\n  }\n\n  _createBack() {\n    var back = new Shape({\n      name: 'back',\n      width: 0,\n      height: 0,\n      draggable: true,\n\n      sceneFunc(ctx) {\n        var tr = this.getParent();\n        var padding = tr.padding();\n        ctx.beginPath();\n        ctx.rect(-padding, -padding, this.width() + padding * 2, this.height() + padding * 2);\n        ctx.moveTo(this.width() / 2, -padding);\n\n        if (tr.rotateEnabled()) {\n          ctx.lineTo(this.width() / 2, -tr.rotateAnchorOffset() * Util._sign(this.height()) - padding);\n        }\n\n        ctx.fillStrokeShape(this);\n      },\n\n      hitFunc: (ctx, shape) => {\n        if (!this.shouldOverdrawWholeArea()) {\n          return;\n        }\n\n        var padding = this.padding();\n        ctx.beginPath();\n        ctx.rect(-padding, -padding, shape.width() + padding * 2, shape.height() + padding * 2);\n        ctx.fillStrokeShape(shape);\n      }\n    });\n    this.add(back);\n\n    this._proxyDrag(back);\n\n    back.on('dragstart', e => {\n      e.cancelBubble = true;\n    });\n    back.on('dragmove', e => {\n      e.cancelBubble = true;\n    });\n    back.on('dragend', e => {\n      e.cancelBubble = true;\n    });\n  }\n\n  _handleMouseDown(e) {\n    this._movingAnchorName = e.target.name().split(' ')[0];\n\n    var attrs = this._getNodeRect();\n\n    var width = attrs.width;\n    var height = attrs.height;\n    var hypotenuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\n    this.sin = Math.abs(height / hypotenuse);\n    this.cos = Math.abs(width / hypotenuse);\n\n    if (typeof window !== 'undefined') {\n      window.addEventListener('mousemove', this._handleMouseMove);\n      window.addEventListener('touchmove', this._handleMouseMove);\n      window.addEventListener('mouseup', this._handleMouseUp, true);\n      window.addEventListener('touchend', this._handleMouseUp, true);\n    }\n\n    this._transforming = true;\n    var ap = e.target.getAbsolutePosition();\n    var pos = e.target.getStage().getPointerPosition();\n    this._anchorDragOffset = {\n      x: pos.x - ap.x,\n      y: pos.y - ap.y\n    };\n\n    this._fire('transformstart', {\n      evt: e,\n      target: this.getNode()\n    });\n\n    this._nodes.forEach(target => {\n      target._fire('transformstart', {\n        evt: e,\n        target\n      });\n    });\n  }\n\n  _handleMouseMove(e) {\n    var x, y, newHypotenuse;\n    var anchorNode = this.findOne('.' + this._movingAnchorName);\n    var stage = anchorNode.getStage();\n    stage.setPointersPositions(e);\n    const pp = stage.getPointerPosition();\n    var newNodePos = {\n      x: pp.x - this._anchorDragOffset.x,\n      y: pp.y - this._anchorDragOffset.y\n    };\n    const oldAbs = anchorNode.getAbsolutePosition();\n    anchorNode.setAbsolutePosition(newNodePos);\n    const newAbs = anchorNode.getAbsolutePosition();\n\n    if (oldAbs.x === newAbs.x && oldAbs.y === newAbs.y) {\n      return;\n    }\n\n    if (this._movingAnchorName === 'rotater') {\n      var attrs = this._getNodeRect();\n\n      x = anchorNode.x() - attrs.width / 2;\n      y = -anchorNode.y() + attrs.height / 2;\n      let delta = Math.atan2(-y, x) + Math.PI / 2;\n\n      if (attrs.height < 0) {\n        delta -= Math.PI;\n      }\n\n      var oldRotation = Konva.getAngle(this.rotation());\n      const newRotation = oldRotation + delta;\n      const tol = Konva.getAngle(this.rotationSnapTolerance());\n      const snappedRot = getSnap(this.rotationSnaps(), newRotation, tol);\n      const diff = snappedRot - attrs.rotation;\n      const shape = rotateAroundCenter(attrs, diff);\n\n      this._fitNodesInto(shape, e);\n\n      return;\n    }\n\n    var keepProportion = this.keepRatio() || e.shiftKey;\n    var centeredScaling = this.centeredScaling() || e.altKey;\n\n    if (this._movingAnchorName === 'top-left') {\n      if (keepProportion) {\n        var comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.bottom-right').x(),\n          y: this.findOne('.bottom-right').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) + Math.pow(comparePoint.y - anchorNode.y(), 2));\n        var reverseX = this.findOne('.top-left').x() > comparePoint.x ? -1 : 1;\n        var reverseY = this.findOne('.top-left').y() > comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        this.findOne('.top-left').x(comparePoint.x - x);\n        this.findOne('.top-left').y(comparePoint.y - y);\n      }\n    } else if (this._movingAnchorName === 'top-center') {\n      this.findOne('.top-left').y(anchorNode.y());\n    } else if (this._movingAnchorName === 'top-right') {\n      if (keepProportion) {\n        var comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.bottom-left').x(),\n          y: this.findOne('.bottom-left').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) + Math.pow(comparePoint.y - anchorNode.y(), 2));\n        var reverseX = this.findOne('.top-right').x() < comparePoint.x ? -1 : 1;\n        var reverseY = this.findOne('.top-right').y() > comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        this.findOne('.top-right').x(comparePoint.x + x);\n        this.findOne('.top-right').y(comparePoint.y - y);\n      }\n\n      var pos = anchorNode.position();\n      this.findOne('.top-left').y(pos.y);\n      this.findOne('.bottom-right').x(pos.x);\n    } else if (this._movingAnchorName === 'middle-left') {\n      this.findOne('.top-left').x(anchorNode.x());\n    } else if (this._movingAnchorName === 'middle-right') {\n      this.findOne('.bottom-right').x(anchorNode.x());\n    } else if (this._movingAnchorName === 'bottom-left') {\n      if (keepProportion) {\n        var comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.top-right').x(),\n          y: this.findOne('.top-right').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) + Math.pow(anchorNode.y() - comparePoint.y, 2));\n        var reverseX = comparePoint.x < anchorNode.x() ? -1 : 1;\n        var reverseY = anchorNode.y() < comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        anchorNode.x(comparePoint.x - x);\n        anchorNode.y(comparePoint.y + y);\n      }\n\n      pos = anchorNode.position();\n      this.findOne('.top-left').x(pos.x);\n      this.findOne('.bottom-right').y(pos.y);\n    } else if (this._movingAnchorName === 'bottom-center') {\n      this.findOne('.bottom-right').y(anchorNode.y());\n    } else if (this._movingAnchorName === 'bottom-right') {\n      if (keepProportion) {\n        var comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.top-left').x(),\n          y: this.findOne('.top-left').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) + Math.pow(anchorNode.y() - comparePoint.y, 2));\n        var reverseX = this.findOne('.bottom-right').x() < comparePoint.x ? -1 : 1;\n        var reverseY = this.findOne('.bottom-right').y() < comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        this.findOne('.bottom-right').x(comparePoint.x + x);\n        this.findOne('.bottom-right').y(comparePoint.y + y);\n      }\n    } else {\n      console.error(new Error('Wrong position argument of selection resizer: ' + this._movingAnchorName));\n    }\n\n    var centeredScaling = this.centeredScaling() || e.altKey;\n\n    if (centeredScaling) {\n      var topLeft = this.findOne('.top-left');\n      var bottomRight = this.findOne('.bottom-right');\n      var topOffsetX = topLeft.x();\n      var topOffsetY = topLeft.y();\n      var bottomOffsetX = this.getWidth() - bottomRight.x();\n      var bottomOffsetY = this.getHeight() - bottomRight.y();\n      bottomRight.move({\n        x: -topOffsetX,\n        y: -topOffsetY\n      });\n      topLeft.move({\n        x: bottomOffsetX,\n        y: bottomOffsetY\n      });\n    }\n\n    var absPos = this.findOne('.top-left').getAbsolutePosition();\n    x = absPos.x;\n    y = absPos.y;\n    var width = this.findOne('.bottom-right').x() - this.findOne('.top-left').x();\n    var height = this.findOne('.bottom-right').y() - this.findOne('.top-left').y();\n\n    this._fitNodesInto({\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      rotation: Konva.getAngle(this.rotation())\n    }, e);\n  }\n\n  _handleMouseUp(e) {\n    this._removeEvents(e);\n  }\n\n  getAbsoluteTransform() {\n    return this.getTransform();\n  }\n\n  _removeEvents(e) {\n    if (this._transforming) {\n      this._transforming = false;\n\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('mousemove', this._handleMouseMove);\n        window.removeEventListener('touchmove', this._handleMouseMove);\n        window.removeEventListener('mouseup', this._handleMouseUp, true);\n        window.removeEventListener('touchend', this._handleMouseUp, true);\n      }\n\n      var node = this.getNode();\n\n      this._fire('transformend', {\n        evt: e,\n        target: node\n      });\n\n      if (node) {\n        this._nodes.forEach(target => {\n          target._fire('transformend', {\n            evt: e,\n            target\n          });\n        });\n      }\n\n      this._movingAnchorName = null;\n    }\n  }\n\n  _fitNodesInto(newAttrs, evt) {\n    var oldAttrs = this._getNodeRect();\n\n    const minSize = 1;\n\n    if (Util._inRange(newAttrs.width, -this.padding() * 2 - minSize, minSize)) {\n      this.update();\n      return;\n    }\n\n    if (Util._inRange(newAttrs.height, -this.padding() * 2 - minSize, minSize)) {\n      this.update();\n      return;\n    }\n\n    const allowNegativeScale = this.flipEnabled();\n    var t = new Transform();\n    t.rotate(Konva.getAngle(this.rotation()));\n\n    if (this._movingAnchorName && newAttrs.width < 0 && this._movingAnchorName.indexOf('left') >= 0) {\n      const offset = t.point({\n        x: -this.padding() * 2,\n        y: 0\n      });\n      newAttrs.x += offset.x;\n      newAttrs.y += offset.y;\n      newAttrs.width += this.padding() * 2;\n      this._movingAnchorName = this._movingAnchorName.replace('left', 'right');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n\n      if (!allowNegativeScale) {\n        this.update();\n        return;\n      }\n    } else if (this._movingAnchorName && newAttrs.width < 0 && this._movingAnchorName.indexOf('right') >= 0) {\n      const offset = t.point({\n        x: this.padding() * 2,\n        y: 0\n      });\n      this._movingAnchorName = this._movingAnchorName.replace('right', 'left');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n      newAttrs.width += this.padding() * 2;\n\n      if (!allowNegativeScale) {\n        this.update();\n        return;\n      }\n    }\n\n    if (this._movingAnchorName && newAttrs.height < 0 && this._movingAnchorName.indexOf('top') >= 0) {\n      const offset = t.point({\n        x: 0,\n        y: -this.padding() * 2\n      });\n      newAttrs.x += offset.x;\n      newAttrs.y += offset.y;\n      this._movingAnchorName = this._movingAnchorName.replace('top', 'bottom');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n      newAttrs.height += this.padding() * 2;\n\n      if (!allowNegativeScale) {\n        this.update();\n        return;\n      }\n    } else if (this._movingAnchorName && newAttrs.height < 0 && this._movingAnchorName.indexOf('bottom') >= 0) {\n      const offset = t.point({\n        x: 0,\n        y: this.padding() * 2\n      });\n      this._movingAnchorName = this._movingAnchorName.replace('bottom', 'top');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n      newAttrs.height += this.padding() * 2;\n\n      if (!allowNegativeScale) {\n        this.update();\n        return;\n      }\n    }\n\n    if (this.boundBoxFunc()) {\n      const bounded = this.boundBoxFunc()(oldAttrs, newAttrs);\n\n      if (bounded) {\n        newAttrs = bounded;\n      } else {\n        Util.warn('boundBoxFunc returned falsy. You should return new bound rect from it!');\n      }\n    }\n\n    const baseSize = 10000000;\n    const oldTr = new Transform();\n    oldTr.translate(oldAttrs.x, oldAttrs.y);\n    oldTr.rotate(oldAttrs.rotation);\n    oldTr.scale(oldAttrs.width / baseSize, oldAttrs.height / baseSize);\n    const newTr = new Transform();\n    newTr.translate(newAttrs.x, newAttrs.y);\n    newTr.rotate(newAttrs.rotation);\n    newTr.scale(newAttrs.width / baseSize, newAttrs.height / baseSize);\n    const delta = newTr.multiply(oldTr.invert());\n\n    this._nodes.forEach(node => {\n      var _a;\n\n      const parentTransform = node.getParent().getAbsoluteTransform();\n      const localTransform = node.getTransform().copy();\n      localTransform.translate(node.offsetX(), node.offsetY());\n      const newLocalTransform = new Transform();\n      newLocalTransform.multiply(parentTransform.copy().invert()).multiply(delta).multiply(parentTransform).multiply(localTransform);\n      const attrs = newLocalTransform.decompose();\n      node.setAttrs(attrs);\n\n      this._fire('transform', {\n        evt: evt,\n        target: node\n      });\n\n      node._fire('transform', {\n        evt: evt,\n        target: node\n      });\n\n      (_a = node.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n    });\n\n    this.rotation(Util._getRotation(newAttrs.rotation));\n\n    this._resetTransformCache();\n\n    this.update();\n    this.getLayer().batchDraw();\n  }\n\n  forceUpdate() {\n    this._resetTransformCache();\n\n    this.update();\n  }\n\n  _batchChangeChild(selector, attrs) {\n    const anchor = this.findOne(selector);\n    anchor.setAttrs(attrs);\n  }\n\n  update() {\n    var _a;\n\n    var attrs = this._getNodeRect();\n\n    this.rotation(Util._getRotation(attrs.rotation));\n    var width = attrs.width;\n    var height = attrs.height;\n    var enabledAnchors = this.enabledAnchors();\n    var resizeEnabled = this.resizeEnabled();\n    var padding = this.padding();\n    var anchorSize = this.anchorSize();\n    this.find('._anchor').forEach(node => {\n      node.setAttrs({\n        width: anchorSize,\n        height: anchorSize,\n        offsetX: anchorSize / 2,\n        offsetY: anchorSize / 2,\n        stroke: this.anchorStroke(),\n        strokeWidth: this.anchorStrokeWidth(),\n        fill: this.anchorFill(),\n        cornerRadius: this.anchorCornerRadius()\n      });\n    });\n\n    this._batchChangeChild('.top-left', {\n      x: 0,\n      y: 0,\n      offsetX: anchorSize / 2 + padding,\n      offsetY: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('top-left') >= 0\n    });\n\n    this._batchChangeChild('.top-center', {\n      x: width / 2,\n      y: 0,\n      offsetY: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('top-center') >= 0\n    });\n\n    this._batchChangeChild('.top-right', {\n      x: width,\n      y: 0,\n      offsetX: anchorSize / 2 - padding,\n      offsetY: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('top-right') >= 0\n    });\n\n    this._batchChangeChild('.middle-left', {\n      x: 0,\n      y: height / 2,\n      offsetX: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('middle-left') >= 0\n    });\n\n    this._batchChangeChild('.middle-right', {\n      x: width,\n      y: height / 2,\n      offsetX: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('middle-right') >= 0\n    });\n\n    this._batchChangeChild('.bottom-left', {\n      x: 0,\n      y: height,\n      offsetX: anchorSize / 2 + padding,\n      offsetY: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('bottom-left') >= 0\n    });\n\n    this._batchChangeChild('.bottom-center', {\n      x: width / 2,\n      y: height,\n      offsetY: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('bottom-center') >= 0\n    });\n\n    this._batchChangeChild('.bottom-right', {\n      x: width,\n      y: height,\n      offsetX: anchorSize / 2 - padding,\n      offsetY: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('bottom-right') >= 0\n    });\n\n    this._batchChangeChild('.rotater', {\n      x: width / 2,\n      y: -this.rotateAnchorOffset() * Util._sign(height) - padding,\n      visible: this.rotateEnabled()\n    });\n\n    this._batchChangeChild('.back', {\n      width: width,\n      height: height,\n      visible: this.borderEnabled(),\n      stroke: this.borderStroke(),\n      strokeWidth: this.borderStrokeWidth(),\n      dash: this.borderDash(),\n      x: 0,\n      y: 0\n    });\n\n    (_a = this.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n  }\n\n  isTransforming() {\n    return this._transforming;\n  }\n\n  stopTransform() {\n    if (this._transforming) {\n      this._removeEvents();\n\n      var anchorNode = this.findOne('.' + this._movingAnchorName);\n\n      if (anchorNode) {\n        anchorNode.stopDrag();\n      }\n    }\n  }\n\n  destroy() {\n    if (this.getStage() && this._cursorChange) {\n      this.getStage().content && (this.getStage().content.style.cursor = '');\n    }\n\n    Group.prototype.destroy.call(this);\n    this.detach();\n\n    this._removeEvents();\n\n    return this;\n  }\n\n  toObject() {\n    return Node.prototype.toObject.call(this);\n  }\n\n}\n\nfunction validateAnchors(val) {\n  if (!(val instanceof Array)) {\n    Util.warn('enabledAnchors value should be an array');\n  }\n\n  if (val instanceof Array) {\n    val.forEach(function (name) {\n      if (ANCHORS_NAMES.indexOf(name) === -1) {\n        Util.warn('Unknown anchor name: ' + name + '. Available names are: ' + ANCHORS_NAMES.join(', '));\n      }\n    });\n  }\n\n  return val || [];\n}\n\nTransformer.prototype.className = 'Transformer';\n\n_registerNode(Transformer);\n\nFactory.addGetterSetter(Transformer, 'enabledAnchors', ANCHORS_NAMES, validateAnchors);\nFactory.addGetterSetter(Transformer, 'flipEnabled', true, getBooleanValidator());\nFactory.addGetterSetter(Transformer, 'resizeEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorSize', 10, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotateEnabled', true);\nFactory.addGetterSetter(Transformer, 'rotationSnaps', []);\nFactory.addGetterSetter(Transformer, 'rotateAnchorOffset', 50, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotationSnapTolerance', 5, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'anchorStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'anchorFill', 'white');\nFactory.addGetterSetter(Transformer, 'anchorCornerRadius', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'borderStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderDash');\nFactory.addGetterSetter(Transformer, 'keepRatio', true);\nFactory.addGetterSetter(Transformer, 'centeredScaling', false);\nFactory.addGetterSetter(Transformer, 'ignoreStroke', false);\nFactory.addGetterSetter(Transformer, 'padding', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'node');\nFactory.addGetterSetter(Transformer, 'nodes');\nFactory.addGetterSetter(Transformer, 'boundBoxFunc');\nFactory.addGetterSetter(Transformer, 'shouldOverdrawWholeArea', false);\nFactory.backCompat(Transformer, {\n  lineEnabled: 'borderEnabled',\n  rotateHandlerOffset: 'rotateAnchorOffset',\n  enabledHandlers: 'enabledAnchors'\n});","map":{"version":3,"sources":["/Users/stevec/Codeclan_Work/Group_Project/SnakesAndLadders/client/node_modules/konva/lib/shapes/Transformer.js"],"names":["Util","Transform","Factory","Node","Shape","Rect","Group","Konva","getBooleanValidator","getNumberValidator","_registerNode","EVENTS_NAME","ATTR_CHANGE_LIST","map","e","join","NODES_RECT","TRANSFORM_CHANGE_STR","ANGLES","TOUCH_DEVICE","_global","getCursor","anchorName","rad","degToRad","angle","radToDeg","_inRange","error","ANCHORS_NAMES","MAX_SAFE_INTEGER","getCenter","shape","x","width","Math","cos","rotation","height","sin","y","rotateAroundPoint","angleRad","point","Object","assign","rotateAroundCenter","deltaRad","center","getSnap","snaps","newRotationRad","tol","snapped","i","length","getAngle","absDiff","abs","PI","dif","min","Transformer","constructor","config","_transforming","_createElements","_handleMouseMove","bind","_handleMouseUp","update","on","getNode","attachTo","node","setNode","warn","setNodes","_nodes","nodes","detach","getAbsoluteRotation","forEach","additionalEvents","_attrsAffectingSize","prop","onChange","_resetTransformCache","isDragging","_proxyDrag","elementsCreated","findOne","lastPos","getAbsolutePosition","startDrag","dx","dy","otherNode","otherAbs","setAbsolutePosition","getNodes","getActiveAnchor","_movingAnchorName","off","_clearCache","_clearSelfAndDescendantCache","_getNodeRect","_getCache","__getNodeRect","__getNodeShape","rot","relative","rect","getClientRect","skipTransform","skipShadow","skipStroke","ignoreStroke","absScale","getAbsoluteScale","absPos","offsetX","offsetY","box","totalPoints","points","trans","getAbsoluteTransform","transformed","push","tr","rotate","minX","minY","maxX","maxY","undefined","max","invert","p","getX","getY","getWidth","getHeight","_createBack","name","_createAnchor","anchor","stroke","fill","strokeWidth","dragDistance","draggable","hitStrokeWidth","self","_handleMouseDown","stopDrag","cancelBubble","cursor","getStage","content","style","_cursorChange","add","back","sceneFunc","ctx","getParent","padding","beginPath","moveTo","rotateEnabled","lineTo","rotateAnchorOffset","_sign","fillStrokeShape","hitFunc","shouldOverdrawWholeArea","target","split","attrs","hypotenuse","sqrt","pow","window","addEventListener","ap","pos","getPointerPosition","_anchorDragOffset","_fire","evt","newHypotenuse","anchorNode","stage","setPointersPositions","pp","newNodePos","oldAbs","newAbs","delta","atan2","oldRotation","newRotation","rotationSnapTolerance","snappedRot","rotationSnaps","diff","_fitNodesInto","keepProportion","keepRatio","shiftKey","centeredScaling","altKey","comparePoint","reverseX","reverseY","position","console","Error","topLeft","bottomRight","topOffsetX","topOffsetY","bottomOffsetX","bottomOffsetY","move","_removeEvents","getTransform","removeEventListener","newAttrs","oldAttrs","minSize","allowNegativeScale","flipEnabled","t","indexOf","offset","replace","boundBoxFunc","bounded","baseSize","oldTr","translate","scale","newTr","multiply","_a","parentTransform","localTransform","copy","newLocalTransform","decompose","setAttrs","getLayer","batchDraw","_getRotation","forceUpdate","_batchChangeChild","selector","enabledAnchors","resizeEnabled","anchorSize","find","anchorStroke","anchorStrokeWidth","anchorFill","cornerRadius","anchorCornerRadius","visible","borderEnabled","borderStroke","borderStrokeWidth","dash","borderDash","isTransforming","stopTransform","destroy","prototype","call","toObject","validateAnchors","val","Array","className","addGetterSetter","backCompat","lineEnabled","rotateHandlerOffset","enabledHandlers"],"mappings":"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","sourcesContent":["import { Util, Transform } from '../Util.js';\nimport { Factory } from '../Factory.js';\nimport { Node } from '../Node.js';\nimport { Shape } from '../Shape.js';\nimport { Rect } from './Rect.js';\nimport { Group } from '../Group.js';\nimport { Konva } from '../Global.js';\nimport { getBooleanValidator, getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nvar EVENTS_NAME = 'tr-konva';\nvar ATTR_CHANGE_LIST = [\n    'resizeEnabledChange',\n    'rotateAnchorOffsetChange',\n    'rotateEnabledChange',\n    'enabledAnchorsChange',\n    'anchorSizeChange',\n    'borderEnabledChange',\n    'borderStrokeChange',\n    'borderStrokeWidthChange',\n    'borderDashChange',\n    'anchorStrokeChange',\n    'anchorStrokeWidthChange',\n    'anchorFillChange',\n    'anchorCornerRadiusChange',\n    'ignoreStrokeChange',\n]\n    .map((e) => e + `.${EVENTS_NAME}`)\n    .join(' ');\nvar NODES_RECT = 'nodesRect';\nvar TRANSFORM_CHANGE_STR = [\n    'widthChange',\n    'heightChange',\n    'scaleXChange',\n    'scaleYChange',\n    'skewXChange',\n    'skewYChange',\n    'rotationChange',\n    'offsetXChange',\n    'offsetYChange',\n    'transformsEnabledChange',\n    'strokeWidthChange',\n]\n    .map((e) => e + `.${EVENTS_NAME}`)\n    .join(' ');\nvar ANGLES = {\n    'top-left': -45,\n    'top-center': 0,\n    'top-right': 45,\n    'middle-right': -90,\n    'middle-left': 90,\n    'bottom-left': -135,\n    'bottom-center': 180,\n    'bottom-right': 135,\n};\nconst TOUCH_DEVICE = 'ontouchstart' in Konva._global;\nfunction getCursor(anchorName, rad) {\n    if (anchorName === 'rotater') {\n        return 'crosshair';\n    }\n    rad += Util.degToRad(ANGLES[anchorName] || 0);\n    var angle = ((Util.radToDeg(rad) % 360) + 360) % 360;\n    if (Util._inRange(angle, 315 + 22.5, 360) || Util._inRange(angle, 0, 22.5)) {\n        return 'ns-resize';\n    }\n    else if (Util._inRange(angle, 45 - 22.5, 45 + 22.5)) {\n        return 'nesw-resize';\n    }\n    else if (Util._inRange(angle, 90 - 22.5, 90 + 22.5)) {\n        return 'ew-resize';\n    }\n    else if (Util._inRange(angle, 135 - 22.5, 135 + 22.5)) {\n        return 'nwse-resize';\n    }\n    else if (Util._inRange(angle, 180 - 22.5, 180 + 22.5)) {\n        return 'ns-resize';\n    }\n    else if (Util._inRange(angle, 225 - 22.5, 225 + 22.5)) {\n        return 'nesw-resize';\n    }\n    else if (Util._inRange(angle, 270 - 22.5, 270 + 22.5)) {\n        return 'ew-resize';\n    }\n    else if (Util._inRange(angle, 315 - 22.5, 315 + 22.5)) {\n        return 'nwse-resize';\n    }\n    else {\n        Util.error('Transformer has unknown angle for cursor detection: ' + angle);\n        return 'pointer';\n    }\n}\nvar ANCHORS_NAMES = [\n    'top-left',\n    'top-center',\n    'top-right',\n    'middle-right',\n    'middle-left',\n    'bottom-left',\n    'bottom-center',\n    'bottom-right',\n];\nvar MAX_SAFE_INTEGER = 100000000;\nfunction getCenter(shape) {\n    return {\n        x: shape.x +\n            (shape.width / 2) * Math.cos(shape.rotation) +\n            (shape.height / 2) * Math.sin(-shape.rotation),\n        y: shape.y +\n            (shape.height / 2) * Math.cos(shape.rotation) +\n            (shape.width / 2) * Math.sin(shape.rotation),\n    };\n}\nfunction rotateAroundPoint(shape, angleRad, point) {\n    const x = point.x +\n        (shape.x - point.x) * Math.cos(angleRad) -\n        (shape.y - point.y) * Math.sin(angleRad);\n    const y = point.y +\n        (shape.x - point.x) * Math.sin(angleRad) +\n        (shape.y - point.y) * Math.cos(angleRad);\n    return Object.assign(Object.assign({}, shape), { rotation: shape.rotation + angleRad, x,\n        y });\n}\nfunction rotateAroundCenter(shape, deltaRad) {\n    const center = getCenter(shape);\n    return rotateAroundPoint(shape, deltaRad, center);\n}\nfunction getSnap(snaps, newRotationRad, tol) {\n    let snapped = newRotationRad;\n    for (let i = 0; i < snaps.length; i++) {\n        const angle = Konva.getAngle(snaps[i]);\n        const absDiff = Math.abs(angle - newRotationRad) % (Math.PI * 2);\n        const dif = Math.min(absDiff, Math.PI * 2 - absDiff);\n        if (dif < tol) {\n            snapped = angle;\n        }\n    }\n    return snapped;\n}\nexport class Transformer extends Group {\n    constructor(config) {\n        super(config);\n        this._transforming = false;\n        this._createElements();\n        this._handleMouseMove = this._handleMouseMove.bind(this);\n        this._handleMouseUp = this._handleMouseUp.bind(this);\n        this.update = this.update.bind(this);\n        this.on(ATTR_CHANGE_LIST, this.update);\n        if (this.getNode()) {\n            this.update();\n        }\n    }\n    attachTo(node) {\n        this.setNode(node);\n        return this;\n    }\n    setNode(node) {\n        Util.warn('tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead.');\n        return this.setNodes([node]);\n    }\n    getNode() {\n        return this._nodes && this._nodes[0];\n    }\n    setNodes(nodes = []) {\n        if (this._nodes && this._nodes.length) {\n            this.detach();\n        }\n        this._nodes = nodes;\n        if (nodes.length === 1) {\n            this.rotation(nodes[0].getAbsoluteRotation());\n        }\n        else {\n            this.rotation(0);\n        }\n        this._nodes.forEach((node) => {\n            const additionalEvents = node._attrsAffectingSize\n                .map((prop) => prop + 'Change.' + EVENTS_NAME)\n                .join(' ');\n            const onChange = () => {\n                if (this.nodes().length === 1) {\n                    this.rotation(this.nodes()[0].getAbsoluteRotation());\n                }\n                this._resetTransformCache();\n                if (!this._transforming && !this.isDragging()) {\n                    this.update();\n                }\n            };\n            node.on(additionalEvents, onChange);\n            node.on(TRANSFORM_CHANGE_STR, onChange);\n            node.on(`absoluteTransformChange.${EVENTS_NAME}`, onChange);\n            node.on(`xChange.${EVENTS_NAME} yChange.${EVENTS_NAME}`, onChange);\n            this._proxyDrag(node);\n        });\n        this._resetTransformCache();\n        var elementsCreated = !!this.findOne('.top-left');\n        if (elementsCreated) {\n            this.update();\n        }\n        return this;\n    }\n    _proxyDrag(node) {\n        let lastPos;\n        node.on(`dragstart.${EVENTS_NAME}`, (e) => {\n            lastPos = node.getAbsolutePosition();\n            if (!this.isDragging() && node !== this.findOne('.back')) {\n                this.startDrag(e, false);\n            }\n        });\n        node.on(`dragmove.${EVENTS_NAME}`, (e) => {\n            if (!lastPos) {\n                return;\n            }\n            const abs = node.getAbsolutePosition();\n            const dx = abs.x - lastPos.x;\n            const dy = abs.y - lastPos.y;\n            this.nodes().forEach((otherNode) => {\n                if (otherNode === node) {\n                    return;\n                }\n                if (otherNode.isDragging()) {\n                    return;\n                }\n                const otherAbs = otherNode.getAbsolutePosition();\n                otherNode.setAbsolutePosition({\n                    x: otherAbs.x + dx,\n                    y: otherAbs.y + dy,\n                });\n                otherNode.startDrag(e);\n            });\n            lastPos = null;\n        });\n    }\n    getNodes() {\n        return this._nodes || [];\n    }\n    getActiveAnchor() {\n        return this._movingAnchorName;\n    }\n    detach() {\n        if (this._nodes) {\n            this._nodes.forEach((node) => {\n                node.off('.' + EVENTS_NAME);\n            });\n        }\n        this._nodes = [];\n        this._resetTransformCache();\n    }\n    _resetTransformCache() {\n        this._clearCache(NODES_RECT);\n        this._clearCache('transform');\n        this._clearSelfAndDescendantCache('absoluteTransform');\n    }\n    _getNodeRect() {\n        return this._getCache(NODES_RECT, this.__getNodeRect);\n    }\n    __getNodeShape(node, rot = this.rotation(), relative) {\n        var rect = node.getClientRect({\n            skipTransform: true,\n            skipShadow: true,\n            skipStroke: this.ignoreStroke(),\n        });\n        var absScale = node.getAbsoluteScale(relative);\n        var absPos = node.getAbsolutePosition(relative);\n        var dx = rect.x * absScale.x - node.offsetX() * absScale.x;\n        var dy = rect.y * absScale.y - node.offsetY() * absScale.y;\n        const rotation = (Konva.getAngle(node.getAbsoluteRotation()) + Math.PI * 2) %\n            (Math.PI * 2);\n        const box = {\n            x: absPos.x + dx * Math.cos(rotation) + dy * Math.sin(-rotation),\n            y: absPos.y + dy * Math.cos(rotation) + dx * Math.sin(rotation),\n            width: rect.width * absScale.x,\n            height: rect.height * absScale.y,\n            rotation: rotation,\n        };\n        return rotateAroundPoint(box, -Konva.getAngle(rot), {\n            x: 0,\n            y: 0,\n        });\n    }\n    __getNodeRect() {\n        var node = this.getNode();\n        if (!node) {\n            return {\n                x: -MAX_SAFE_INTEGER,\n                y: -MAX_SAFE_INTEGER,\n                width: 0,\n                height: 0,\n                rotation: 0,\n            };\n        }\n        const totalPoints = [];\n        this.nodes().map((node) => {\n            const box = node.getClientRect({\n                skipTransform: true,\n                skipShadow: true,\n                skipStroke: this.ignoreStroke(),\n            });\n            var points = [\n                { x: box.x, y: box.y },\n                { x: box.x + box.width, y: box.y },\n                { x: box.x + box.width, y: box.y + box.height },\n                { x: box.x, y: box.y + box.height },\n            ];\n            var trans = node.getAbsoluteTransform();\n            points.forEach(function (point) {\n                var transformed = trans.point(point);\n                totalPoints.push(transformed);\n            });\n        });\n        const tr = new Transform();\n        tr.rotate(-Konva.getAngle(this.rotation()));\n        var minX, minY, maxX, maxY;\n        totalPoints.forEach(function (point) {\n            var transformed = tr.point(point);\n            if (minX === undefined) {\n                minX = maxX = transformed.x;\n                minY = maxY = transformed.y;\n            }\n            minX = Math.min(minX, transformed.x);\n            minY = Math.min(minY, transformed.y);\n            maxX = Math.max(maxX, transformed.x);\n            maxY = Math.max(maxY, transformed.y);\n        });\n        tr.invert();\n        const p = tr.point({ x: minX, y: minY });\n        return {\n            x: p.x,\n            y: p.y,\n            width: maxX - minX,\n            height: maxY - minY,\n            rotation: Konva.getAngle(this.rotation()),\n        };\n    }\n    getX() {\n        return this._getNodeRect().x;\n    }\n    getY() {\n        return this._getNodeRect().y;\n    }\n    getWidth() {\n        return this._getNodeRect().width;\n    }\n    getHeight() {\n        return this._getNodeRect().height;\n    }\n    _createElements() {\n        this._createBack();\n        ANCHORS_NAMES.forEach(function (name) {\n            this._createAnchor(name);\n        }.bind(this));\n        this._createAnchor('rotater');\n    }\n    _createAnchor(name) {\n        var anchor = new Rect({\n            stroke: 'rgb(0, 161, 255)',\n            fill: 'white',\n            strokeWidth: 1,\n            name: name + ' _anchor',\n            dragDistance: 0,\n            draggable: true,\n            hitStrokeWidth: TOUCH_DEVICE ? 10 : 'auto',\n        });\n        var self = this;\n        anchor.on('mousedown touchstart', function (e) {\n            self._handleMouseDown(e);\n        });\n        anchor.on('dragstart', (e) => {\n            anchor.stopDrag();\n            e.cancelBubble = true;\n        });\n        anchor.on('dragend', (e) => {\n            e.cancelBubble = true;\n        });\n        anchor.on('mouseenter', () => {\n            var rad = Konva.getAngle(this.rotation());\n            var cursor = getCursor(name, rad);\n            anchor.getStage().content &&\n                (anchor.getStage().content.style.cursor = cursor);\n            this._cursorChange = true;\n        });\n        anchor.on('mouseout', () => {\n            anchor.getStage().content &&\n                (anchor.getStage().content.style.cursor = '');\n            this._cursorChange = false;\n        });\n        this.add(anchor);\n    }\n    _createBack() {\n        var back = new Shape({\n            name: 'back',\n            width: 0,\n            height: 0,\n            draggable: true,\n            sceneFunc(ctx) {\n                var tr = this.getParent();\n                var padding = tr.padding();\n                ctx.beginPath();\n                ctx.rect(-padding, -padding, this.width() + padding * 2, this.height() + padding * 2);\n                ctx.moveTo(this.width() / 2, -padding);\n                if (tr.rotateEnabled()) {\n                    ctx.lineTo(this.width() / 2, -tr.rotateAnchorOffset() * Util._sign(this.height()) - padding);\n                }\n                ctx.fillStrokeShape(this);\n            },\n            hitFunc: (ctx, shape) => {\n                if (!this.shouldOverdrawWholeArea()) {\n                    return;\n                }\n                var padding = this.padding();\n                ctx.beginPath();\n                ctx.rect(-padding, -padding, shape.width() + padding * 2, shape.height() + padding * 2);\n                ctx.fillStrokeShape(shape);\n            },\n        });\n        this.add(back);\n        this._proxyDrag(back);\n        back.on('dragstart', (e) => {\n            e.cancelBubble = true;\n        });\n        back.on('dragmove', (e) => {\n            e.cancelBubble = true;\n        });\n        back.on('dragend', (e) => {\n            e.cancelBubble = true;\n        });\n    }\n    _handleMouseDown(e) {\n        this._movingAnchorName = e.target.name().split(' ')[0];\n        var attrs = this._getNodeRect();\n        var width = attrs.width;\n        var height = attrs.height;\n        var hypotenuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\n        this.sin = Math.abs(height / hypotenuse);\n        this.cos = Math.abs(width / hypotenuse);\n        if (typeof window !== 'undefined') {\n            window.addEventListener('mousemove', this._handleMouseMove);\n            window.addEventListener('touchmove', this._handleMouseMove);\n            window.addEventListener('mouseup', this._handleMouseUp, true);\n            window.addEventListener('touchend', this._handleMouseUp, true);\n        }\n        this._transforming = true;\n        var ap = e.target.getAbsolutePosition();\n        var pos = e.target.getStage().getPointerPosition();\n        this._anchorDragOffset = {\n            x: pos.x - ap.x,\n            y: pos.y - ap.y,\n        };\n        this._fire('transformstart', { evt: e, target: this.getNode() });\n        this._nodes.forEach((target) => {\n            target._fire('transformstart', { evt: e, target });\n        });\n    }\n    _handleMouseMove(e) {\n        var x, y, newHypotenuse;\n        var anchorNode = this.findOne('.' + this._movingAnchorName);\n        var stage = anchorNode.getStage();\n        stage.setPointersPositions(e);\n        const pp = stage.getPointerPosition();\n        var newNodePos = {\n            x: pp.x - this._anchorDragOffset.x,\n            y: pp.y - this._anchorDragOffset.y,\n        };\n        const oldAbs = anchorNode.getAbsolutePosition();\n        anchorNode.setAbsolutePosition(newNodePos);\n        const newAbs = anchorNode.getAbsolutePosition();\n        if (oldAbs.x === newAbs.x && oldAbs.y === newAbs.y) {\n            return;\n        }\n        if (this._movingAnchorName === 'rotater') {\n            var attrs = this._getNodeRect();\n            x = anchorNode.x() - attrs.width / 2;\n            y = -anchorNode.y() + attrs.height / 2;\n            let delta = Math.atan2(-y, x) + Math.PI / 2;\n            if (attrs.height < 0) {\n                delta -= Math.PI;\n            }\n            var oldRotation = Konva.getAngle(this.rotation());\n            const newRotation = oldRotation + delta;\n            const tol = Konva.getAngle(this.rotationSnapTolerance());\n            const snappedRot = getSnap(this.rotationSnaps(), newRotation, tol);\n            const diff = snappedRot - attrs.rotation;\n            const shape = rotateAroundCenter(attrs, diff);\n            this._fitNodesInto(shape, e);\n            return;\n        }\n        var keepProportion = this.keepRatio() || e.shiftKey;\n        var centeredScaling = this.centeredScaling() || e.altKey;\n        if (this._movingAnchorName === 'top-left') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.bottom-right').x(),\n                        y: this.findOne('.bottom-right').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) +\n                    Math.pow(comparePoint.y - anchorNode.y(), 2));\n                var reverseX = this.findOne('.top-left').x() > comparePoint.x ? -1 : 1;\n                var reverseY = this.findOne('.top-left').y() > comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                this.findOne('.top-left').x(comparePoint.x - x);\n                this.findOne('.top-left').y(comparePoint.y - y);\n            }\n        }\n        else if (this._movingAnchorName === 'top-center') {\n            this.findOne('.top-left').y(anchorNode.y());\n        }\n        else if (this._movingAnchorName === 'top-right') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.bottom-left').x(),\n                        y: this.findOne('.bottom-left').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) +\n                    Math.pow(comparePoint.y - anchorNode.y(), 2));\n                var reverseX = this.findOne('.top-right').x() < comparePoint.x ? -1 : 1;\n                var reverseY = this.findOne('.top-right').y() > comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                this.findOne('.top-right').x(comparePoint.x + x);\n                this.findOne('.top-right').y(comparePoint.y - y);\n            }\n            var pos = anchorNode.position();\n            this.findOne('.top-left').y(pos.y);\n            this.findOne('.bottom-right').x(pos.x);\n        }\n        else if (this._movingAnchorName === 'middle-left') {\n            this.findOne('.top-left').x(anchorNode.x());\n        }\n        else if (this._movingAnchorName === 'middle-right') {\n            this.findOne('.bottom-right').x(anchorNode.x());\n        }\n        else if (this._movingAnchorName === 'bottom-left') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.top-right').x(),\n                        y: this.findOne('.top-right').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) +\n                    Math.pow(anchorNode.y() - comparePoint.y, 2));\n                var reverseX = comparePoint.x < anchorNode.x() ? -1 : 1;\n                var reverseY = anchorNode.y() < comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                anchorNode.x(comparePoint.x - x);\n                anchorNode.y(comparePoint.y + y);\n            }\n            pos = anchorNode.position();\n            this.findOne('.top-left').x(pos.x);\n            this.findOne('.bottom-right').y(pos.y);\n        }\n        else if (this._movingAnchorName === 'bottom-center') {\n            this.findOne('.bottom-right').y(anchorNode.y());\n        }\n        else if (this._movingAnchorName === 'bottom-right') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.top-left').x(),\n                        y: this.findOne('.top-left').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) +\n                    Math.pow(anchorNode.y() - comparePoint.y, 2));\n                var reverseX = this.findOne('.bottom-right').x() < comparePoint.x ? -1 : 1;\n                var reverseY = this.findOne('.bottom-right').y() < comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                this.findOne('.bottom-right').x(comparePoint.x + x);\n                this.findOne('.bottom-right').y(comparePoint.y + y);\n            }\n        }\n        else {\n            console.error(new Error('Wrong position argument of selection resizer: ' +\n                this._movingAnchorName));\n        }\n        var centeredScaling = this.centeredScaling() || e.altKey;\n        if (centeredScaling) {\n            var topLeft = this.findOne('.top-left');\n            var bottomRight = this.findOne('.bottom-right');\n            var topOffsetX = topLeft.x();\n            var topOffsetY = topLeft.y();\n            var bottomOffsetX = this.getWidth() - bottomRight.x();\n            var bottomOffsetY = this.getHeight() - bottomRight.y();\n            bottomRight.move({\n                x: -topOffsetX,\n                y: -topOffsetY,\n            });\n            topLeft.move({\n                x: bottomOffsetX,\n                y: bottomOffsetY,\n            });\n        }\n        var absPos = this.findOne('.top-left').getAbsolutePosition();\n        x = absPos.x;\n        y = absPos.y;\n        var width = this.findOne('.bottom-right').x() - this.findOne('.top-left').x();\n        var height = this.findOne('.bottom-right').y() - this.findOne('.top-left').y();\n        this._fitNodesInto({\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            rotation: Konva.getAngle(this.rotation()),\n        }, e);\n    }\n    _handleMouseUp(e) {\n        this._removeEvents(e);\n    }\n    getAbsoluteTransform() {\n        return this.getTransform();\n    }\n    _removeEvents(e) {\n        if (this._transforming) {\n            this._transforming = false;\n            if (typeof window !== 'undefined') {\n                window.removeEventListener('mousemove', this._handleMouseMove);\n                window.removeEventListener('touchmove', this._handleMouseMove);\n                window.removeEventListener('mouseup', this._handleMouseUp, true);\n                window.removeEventListener('touchend', this._handleMouseUp, true);\n            }\n            var node = this.getNode();\n            this._fire('transformend', { evt: e, target: node });\n            if (node) {\n                this._nodes.forEach((target) => {\n                    target._fire('transformend', { evt: e, target });\n                });\n            }\n            this._movingAnchorName = null;\n        }\n    }\n    _fitNodesInto(newAttrs, evt) {\n        var oldAttrs = this._getNodeRect();\n        const minSize = 1;\n        if (Util._inRange(newAttrs.width, -this.padding() * 2 - minSize, minSize)) {\n            this.update();\n            return;\n        }\n        if (Util._inRange(newAttrs.height, -this.padding() * 2 - minSize, minSize)) {\n            this.update();\n            return;\n        }\n        const allowNegativeScale = this.flipEnabled();\n        var t = new Transform();\n        t.rotate(Konva.getAngle(this.rotation()));\n        if (this._movingAnchorName &&\n            newAttrs.width < 0 &&\n            this._movingAnchorName.indexOf('left') >= 0) {\n            const offset = t.point({\n                x: -this.padding() * 2,\n                y: 0,\n            });\n            newAttrs.x += offset.x;\n            newAttrs.y += offset.y;\n            newAttrs.width += this.padding() * 2;\n            this._movingAnchorName = this._movingAnchorName.replace('left', 'right');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        else if (this._movingAnchorName &&\n            newAttrs.width < 0 &&\n            this._movingAnchorName.indexOf('right') >= 0) {\n            const offset = t.point({\n                x: this.padding() * 2,\n                y: 0,\n            });\n            this._movingAnchorName = this._movingAnchorName.replace('right', 'left');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            newAttrs.width += this.padding() * 2;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        if (this._movingAnchorName &&\n            newAttrs.height < 0 &&\n            this._movingAnchorName.indexOf('top') >= 0) {\n            const offset = t.point({\n                x: 0,\n                y: -this.padding() * 2,\n            });\n            newAttrs.x += offset.x;\n            newAttrs.y += offset.y;\n            this._movingAnchorName = this._movingAnchorName.replace('top', 'bottom');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            newAttrs.height += this.padding() * 2;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        else if (this._movingAnchorName &&\n            newAttrs.height < 0 &&\n            this._movingAnchorName.indexOf('bottom') >= 0) {\n            const offset = t.point({\n                x: 0,\n                y: this.padding() * 2,\n            });\n            this._movingAnchorName = this._movingAnchorName.replace('bottom', 'top');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            newAttrs.height += this.padding() * 2;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        if (this.boundBoxFunc()) {\n            const bounded = this.boundBoxFunc()(oldAttrs, newAttrs);\n            if (bounded) {\n                newAttrs = bounded;\n            }\n            else {\n                Util.warn('boundBoxFunc returned falsy. You should return new bound rect from it!');\n            }\n        }\n        const baseSize = 10000000;\n        const oldTr = new Transform();\n        oldTr.translate(oldAttrs.x, oldAttrs.y);\n        oldTr.rotate(oldAttrs.rotation);\n        oldTr.scale(oldAttrs.width / baseSize, oldAttrs.height / baseSize);\n        const newTr = new Transform();\n        newTr.translate(newAttrs.x, newAttrs.y);\n        newTr.rotate(newAttrs.rotation);\n        newTr.scale(newAttrs.width / baseSize, newAttrs.height / baseSize);\n        const delta = newTr.multiply(oldTr.invert());\n        this._nodes.forEach((node) => {\n            var _a;\n            const parentTransform = node.getParent().getAbsoluteTransform();\n            const localTransform = node.getTransform().copy();\n            localTransform.translate(node.offsetX(), node.offsetY());\n            const newLocalTransform = new Transform();\n            newLocalTransform\n                .multiply(parentTransform.copy().invert())\n                .multiply(delta)\n                .multiply(parentTransform)\n                .multiply(localTransform);\n            const attrs = newLocalTransform.decompose();\n            node.setAttrs(attrs);\n            this._fire('transform', { evt: evt, target: node });\n            node._fire('transform', { evt: evt, target: node });\n            (_a = node.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n        });\n        this.rotation(Util._getRotation(newAttrs.rotation));\n        this._resetTransformCache();\n        this.update();\n        this.getLayer().batchDraw();\n    }\n    forceUpdate() {\n        this._resetTransformCache();\n        this.update();\n    }\n    _batchChangeChild(selector, attrs) {\n        const anchor = this.findOne(selector);\n        anchor.setAttrs(attrs);\n    }\n    update() {\n        var _a;\n        var attrs = this._getNodeRect();\n        this.rotation(Util._getRotation(attrs.rotation));\n        var width = attrs.width;\n        var height = attrs.height;\n        var enabledAnchors = this.enabledAnchors();\n        var resizeEnabled = this.resizeEnabled();\n        var padding = this.padding();\n        var anchorSize = this.anchorSize();\n        this.find('._anchor').forEach((node) => {\n            node.setAttrs({\n                width: anchorSize,\n                height: anchorSize,\n                offsetX: anchorSize / 2,\n                offsetY: anchorSize / 2,\n                stroke: this.anchorStroke(),\n                strokeWidth: this.anchorStrokeWidth(),\n                fill: this.anchorFill(),\n                cornerRadius: this.anchorCornerRadius(),\n            });\n        });\n        this._batchChangeChild('.top-left', {\n            x: 0,\n            y: 0,\n            offsetX: anchorSize / 2 + padding,\n            offsetY: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('top-left') >= 0,\n        });\n        this._batchChangeChild('.top-center', {\n            x: width / 2,\n            y: 0,\n            offsetY: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('top-center') >= 0,\n        });\n        this._batchChangeChild('.top-right', {\n            x: width,\n            y: 0,\n            offsetX: anchorSize / 2 - padding,\n            offsetY: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('top-right') >= 0,\n        });\n        this._batchChangeChild('.middle-left', {\n            x: 0,\n            y: height / 2,\n            offsetX: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('middle-left') >= 0,\n        });\n        this._batchChangeChild('.middle-right', {\n            x: width,\n            y: height / 2,\n            offsetX: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('middle-right') >= 0,\n        });\n        this._batchChangeChild('.bottom-left', {\n            x: 0,\n            y: height,\n            offsetX: anchorSize / 2 + padding,\n            offsetY: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('bottom-left') >= 0,\n        });\n        this._batchChangeChild('.bottom-center', {\n            x: width / 2,\n            y: height,\n            offsetY: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('bottom-center') >= 0,\n        });\n        this._batchChangeChild('.bottom-right', {\n            x: width,\n            y: height,\n            offsetX: anchorSize / 2 - padding,\n            offsetY: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('bottom-right') >= 0,\n        });\n        this._batchChangeChild('.rotater', {\n            x: width / 2,\n            y: -this.rotateAnchorOffset() * Util._sign(height) - padding,\n            visible: this.rotateEnabled(),\n        });\n        this._batchChangeChild('.back', {\n            width: width,\n            height: height,\n            visible: this.borderEnabled(),\n            stroke: this.borderStroke(),\n            strokeWidth: this.borderStrokeWidth(),\n            dash: this.borderDash(),\n            x: 0,\n            y: 0,\n        });\n        (_a = this.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n    }\n    isTransforming() {\n        return this._transforming;\n    }\n    stopTransform() {\n        if (this._transforming) {\n            this._removeEvents();\n            var anchorNode = this.findOne('.' + this._movingAnchorName);\n            if (anchorNode) {\n                anchorNode.stopDrag();\n            }\n        }\n    }\n    destroy() {\n        if (this.getStage() && this._cursorChange) {\n            this.getStage().content && (this.getStage().content.style.cursor = '');\n        }\n        Group.prototype.destroy.call(this);\n        this.detach();\n        this._removeEvents();\n        return this;\n    }\n    toObject() {\n        return Node.prototype.toObject.call(this);\n    }\n}\nfunction validateAnchors(val) {\n    if (!(val instanceof Array)) {\n        Util.warn('enabledAnchors value should be an array');\n    }\n    if (val instanceof Array) {\n        val.forEach(function (name) {\n            if (ANCHORS_NAMES.indexOf(name) === -1) {\n                Util.warn('Unknown anchor name: ' +\n                    name +\n                    '. Available names are: ' +\n                    ANCHORS_NAMES.join(', '));\n            }\n        });\n    }\n    return val || [];\n}\nTransformer.prototype.className = 'Transformer';\n_registerNode(Transformer);\nFactory.addGetterSetter(Transformer, 'enabledAnchors', ANCHORS_NAMES, validateAnchors);\nFactory.addGetterSetter(Transformer, 'flipEnabled', true, getBooleanValidator());\nFactory.addGetterSetter(Transformer, 'resizeEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorSize', 10, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotateEnabled', true);\nFactory.addGetterSetter(Transformer, 'rotationSnaps', []);\nFactory.addGetterSetter(Transformer, 'rotateAnchorOffset', 50, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotationSnapTolerance', 5, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'anchorStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'anchorFill', 'white');\nFactory.addGetterSetter(Transformer, 'anchorCornerRadius', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'borderStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderDash');\nFactory.addGetterSetter(Transformer, 'keepRatio', true);\nFactory.addGetterSetter(Transformer, 'centeredScaling', false);\nFactory.addGetterSetter(Transformer, 'ignoreStroke', false);\nFactory.addGetterSetter(Transformer, 'padding', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'node');\nFactory.addGetterSetter(Transformer, 'nodes');\nFactory.addGetterSetter(Transformer, 'boundBoxFunc');\nFactory.addGetterSetter(Transformer, 'shouldOverdrawWholeArea', false);\nFactory.backCompat(Transformer, {\n    lineEnabled: 'borderEnabled',\n    rotateHandlerOffset: 'rotateAnchorOffset',\n    enabledHandlers: 'enabledAnchors',\n});\n"]},"metadata":{},"sourceType":"module"}