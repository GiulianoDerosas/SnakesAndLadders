{"ast":null,"code":"import { Konva } from './Global.js';\nimport { Util } from './Util.js';\n\nfunction _formatValue(val) {\n  if (Util._isString(val)) {\n    return '\"' + val + '\"';\n  }\n\n  if (Object.prototype.toString.call(val) === '[object Number]') {\n    return val;\n  }\n\n  if (Util._isBoolean(val)) {\n    return val;\n  }\n\n  return Object.prototype.toString.call(val);\n}\n\nexport function RGBComponent(val) {\n  if (val > 255) {\n    return 255;\n  } else if (val < 0) {\n    return 0;\n  }\n\n  return Math.round(val);\n}\nexport function alphaComponent(val) {\n  if (val > 1) {\n    return 1;\n  } else if (val < 0.0001) {\n    return 0.0001;\n  }\n\n  return val;\n}\nexport function getNumberValidator() {\n  if (Konva.isUnminified) {\n    return function (val, attr) {\n      if (!Util._isNumber(val)) {\n        Util.warn(_formatValue(val) + ' is a not valid value for \"' + attr + '\" attribute. The value should be a number.');\n      }\n\n      return val;\n    };\n  }\n}\nexport function getNumberOrArrayOfNumbersValidator(noOfElements) {\n  if (Konva.isUnminified) {\n    return function (val, attr) {\n      let isNumber = Util._isNumber(val);\n\n      let isValidArray = Util._isArray(val) && val.length == noOfElements;\n\n      if (!isNumber && !isValidArray) {\n        Util.warn(_formatValue(val) + ' is a not valid value for \"' + attr + '\" attribute. The value should be a number or Array<number>(' + noOfElements + ')');\n      }\n\n      return val;\n    };\n  }\n}\nexport function getNumberOrAutoValidator() {\n  if (Konva.isUnminified) {\n    return function (val, attr) {\n      var isNumber = Util._isNumber(val);\n\n      var isAuto = val === 'auto';\n\n      if (!(isNumber || isAuto)) {\n        Util.warn(_formatValue(val) + ' is a not valid value for \"' + attr + '\" attribute. The value should be a number or \"auto\".');\n      }\n\n      return val;\n    };\n  }\n}\nexport function getStringValidator() {\n  if (Konva.isUnminified) {\n    return function (val, attr) {\n      if (!Util._isString(val)) {\n        Util.warn(_formatValue(val) + ' is a not valid value for \"' + attr + '\" attribute. The value should be a string.');\n      }\n\n      return val;\n    };\n  }\n}\nexport function getStringOrGradientValidator() {\n  if (Konva.isUnminified) {\n    return function (val, attr) {\n      const isString = Util._isString(val);\n\n      const isGradient = Object.prototype.toString.call(val) === '[object CanvasGradient]' || val && val.addColorStop;\n\n      if (!(isString || isGradient)) {\n        Util.warn(_formatValue(val) + ' is a not valid value for \"' + attr + '\" attribute. The value should be a string or a native gradient.');\n      }\n\n      return val;\n    };\n  }\n}\nexport function getFunctionValidator() {\n  if (Konva.isUnminified) {\n    return function (val, attr) {\n      if (!Util._isFunction(val)) {\n        Util.warn(_formatValue(val) + ' is a not valid value for \"' + attr + '\" attribute. The value should be a function.');\n      }\n\n      return val;\n    };\n  }\n}\nexport function getNumberArrayValidator() {\n  if (Konva.isUnminified) {\n    return function (val, attr) {\n      if (!Util._isArray(val)) {\n        Util.warn(_formatValue(val) + ' is a not valid value for \"' + attr + '\" attribute. The value should be a array of numbers.');\n      } else {\n        val.forEach(function (item) {\n          if (!Util._isNumber(item)) {\n            Util.warn('\"' + attr + '\" attribute has non numeric element ' + item + '. Make sure that all elements are numbers.');\n          }\n        });\n      }\n\n      return val;\n    };\n  }\n}\nexport function getBooleanValidator() {\n  if (Konva.isUnminified) {\n    return function (val, attr) {\n      var isBool = val === true || val === false;\n\n      if (!isBool) {\n        Util.warn(_formatValue(val) + ' is a not valid value for \"' + attr + '\" attribute. The value should be a boolean.');\n      }\n\n      return val;\n    };\n  }\n}\nexport function getComponentValidator(components) {\n  if (Konva.isUnminified) {\n    return function (val, attr) {\n      if (!Util.isObject(val)) {\n        Util.warn(_formatValue(val) + ' is a not valid value for \"' + attr + '\" attribute. The value should be an object with properties ' + components);\n      }\n\n      return val;\n    };\n  }\n}","map":{"version":3,"sources":["/Users/stevec/Codeclan_Work/Group_Project/SnakesAndLadders/client/node_modules/konva/lib/Validators.js"],"names":["Konva","Util","_formatValue","val","_isString","Object","prototype","toString","call","_isBoolean","RGBComponent","Math","round","alphaComponent","getNumberValidator","isUnminified","attr","_isNumber","warn","getNumberOrArrayOfNumbersValidator","noOfElements","isNumber","isValidArray","_isArray","length","getNumberOrAutoValidator","isAuto","getStringValidator","getStringOrGradientValidator","isString","isGradient","addColorStop","getFunctionValidator","_isFunction","getNumberArrayValidator","forEach","item","getBooleanValidator","isBool","getComponentValidator","components","isObject"],"mappings":"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","sourcesContent":["import { Konva } from './Global.js';\nimport { Util } from './Util.js';\nfunction _formatValue(val) {\n    if (Util._isString(val)) {\n        return '\"' + val + '\"';\n    }\n    if (Object.prototype.toString.call(val) === '[object Number]') {\n        return val;\n    }\n    if (Util._isBoolean(val)) {\n        return val;\n    }\n    return Object.prototype.toString.call(val);\n}\nexport function RGBComponent(val) {\n    if (val > 255) {\n        return 255;\n    }\n    else if (val < 0) {\n        return 0;\n    }\n    return Math.round(val);\n}\nexport function alphaComponent(val) {\n    if (val > 1) {\n        return 1;\n    }\n    else if (val < 0.0001) {\n        return 0.0001;\n    }\n    return val;\n}\nexport function getNumberValidator() {\n    if (Konva.isUnminified) {\n        return function (val, attr) {\n            if (!Util._isNumber(val)) {\n                Util.warn(_formatValue(val) +\n                    ' is a not valid value for \"' +\n                    attr +\n                    '\" attribute. The value should be a number.');\n            }\n            return val;\n        };\n    }\n}\nexport function getNumberOrArrayOfNumbersValidator(noOfElements) {\n    if (Konva.isUnminified) {\n        return function (val, attr) {\n            let isNumber = Util._isNumber(val);\n            let isValidArray = Util._isArray(val) && val.length == noOfElements;\n            if (!isNumber && !isValidArray) {\n                Util.warn(_formatValue(val) +\n                    ' is a not valid value for \"' +\n                    attr +\n                    '\" attribute. The value should be a number or Array<number>(' +\n                    noOfElements +\n                    ')');\n            }\n            return val;\n        };\n    }\n}\nexport function getNumberOrAutoValidator() {\n    if (Konva.isUnminified) {\n        return function (val, attr) {\n            var isNumber = Util._isNumber(val);\n            var isAuto = val === 'auto';\n            if (!(isNumber || isAuto)) {\n                Util.warn(_formatValue(val) +\n                    ' is a not valid value for \"' +\n                    attr +\n                    '\" attribute. The value should be a number or \"auto\".');\n            }\n            return val;\n        };\n    }\n}\nexport function getStringValidator() {\n    if (Konva.isUnminified) {\n        return function (val, attr) {\n            if (!Util._isString(val)) {\n                Util.warn(_formatValue(val) +\n                    ' is a not valid value for \"' +\n                    attr +\n                    '\" attribute. The value should be a string.');\n            }\n            return val;\n        };\n    }\n}\nexport function getStringOrGradientValidator() {\n    if (Konva.isUnminified) {\n        return function (val, attr) {\n            const isString = Util._isString(val);\n            const isGradient = Object.prototype.toString.call(val) === '[object CanvasGradient]' ||\n                (val && val.addColorStop);\n            if (!(isString || isGradient)) {\n                Util.warn(_formatValue(val) +\n                    ' is a not valid value for \"' +\n                    attr +\n                    '\" attribute. The value should be a string or a native gradient.');\n            }\n            return val;\n        };\n    }\n}\nexport function getFunctionValidator() {\n    if (Konva.isUnminified) {\n        return function (val, attr) {\n            if (!Util._isFunction(val)) {\n                Util.warn(_formatValue(val) +\n                    ' is a not valid value for \"' +\n                    attr +\n                    '\" attribute. The value should be a function.');\n            }\n            return val;\n        };\n    }\n}\nexport function getNumberArrayValidator() {\n    if (Konva.isUnminified) {\n        return function (val, attr) {\n            if (!Util._isArray(val)) {\n                Util.warn(_formatValue(val) +\n                    ' is a not valid value for \"' +\n                    attr +\n                    '\" attribute. The value should be a array of numbers.');\n            }\n            else {\n                val.forEach(function (item) {\n                    if (!Util._isNumber(item)) {\n                        Util.warn('\"' +\n                            attr +\n                            '\" attribute has non numeric element ' +\n                            item +\n                            '. Make sure that all elements are numbers.');\n                    }\n                });\n            }\n            return val;\n        };\n    }\n}\nexport function getBooleanValidator() {\n    if (Konva.isUnminified) {\n        return function (val, attr) {\n            var isBool = val === true || val === false;\n            if (!isBool) {\n                Util.warn(_formatValue(val) +\n                    ' is a not valid value for \"' +\n                    attr +\n                    '\" attribute. The value should be a boolean.');\n            }\n            return val;\n        };\n    }\n}\nexport function getComponentValidator(components) {\n    if (Konva.isUnminified) {\n        return function (val, attr) {\n            if (!Util.isObject(val)) {\n                Util.warn(_formatValue(val) +\n                    ' is a not valid value for \"' +\n                    attr +\n                    '\" attribute. The value should be an object with properties ' +\n                    components);\n            }\n            return val;\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}