{"ast":null,"code":"var _jsxFileName = \"/Users/stevec/Codeclan_Work/Group_Project/SnakesAndLadders/client/src/components/Canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Canvas = props => {\n  _s();\n\n  const canvasRef = useRef([]);\n\n  const draw = ctx => {\n    ctx.fillStyle = '#000000';\n    ctx.beginPath();\n    ctx.arc(50, 100, 20, 0, 2 * Math.PI);\n    ctx.fillStyle = '#00000';\n    ctx.fill();\n  };\n\n  for (let index = 0; index < numRow * numRow; index++) {\n    // add each tile to the array\n    board.push({\n      xAxis,\n      yAxis,\n      tileSize,\n      index\n    });\n    xAxis = xAxis + tileSize * direction; // reverse direction after 10th tile and move up 1 tile\n\n    if (xAxis >= width || xAxis <= -tileSize) {\n      direction *= -1;\n      xAxis += tileSize * direction;\n      yAxis -= tileSize;\n    }\n  }\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d'); //Our first draw\n\n    draw(context); // context.fillStyle = '#ebebeb'\n    // context.fillRect(0, 0, context.canvas.width, context.canvas.height)\n  }, [draw]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/stevec/Codeclan_Work/Group_Project/SnakesAndLadders/client/src/components/Canvas.js"],"names":["React","useRef","useEffect","Canvas","props","canvasRef","draw","ctx","fillStyle","beginPath","arc","Math","PI","fill","index","numRow","board","push","xAxis","yAxis","tileSize","direction","width","canvas","current","context","getContext"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;;;AAEA,MAAMC,MAAM,GAAGC,KAAK,IAAI;AAAA;;AAEtB,QAAMC,SAAS,GAAGJ,MAAM,CAAC,EAAD,CAAxB;;AAEA,QAAMK,IAAI,GAAGC,GAAG,IAAI;AAClBA,IAAAA,GAAG,CAACC,SAAJ,GAAgB,SAAhB;AACAD,IAAAA,GAAG,CAACE,SAAJ;AACAF,IAAAA,GAAG,CAACG,GAAJ,CAAQ,EAAR,EAAY,GAAZ,EAAiB,EAAjB,EAAqB,CAArB,EAAwB,IAAEC,IAAI,CAACC,EAA/B;AACAL,IAAAA,GAAG,CAACC,SAAJ,GAAgB,QAAhB;AACAD,IAAAA,GAAG,CAACM,IAAJ;AACD,GAND;;AAQA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGC,MAAM,GAAGA,MAArC,EAA6CD,KAAK,EAAlD,EAAsD;AACpD;AACAE,IAAAA,KAAK,CAACC,IAAN,CAAW;AAACC,MAAAA,KAAD;AAAQC,MAAAA,KAAR;AAAeC,MAAAA,QAAf;AAAyBN,MAAAA;AAAzB,KAAX;AACAI,IAAAA,KAAK,GAAGA,KAAK,GAAGE,QAAQ,GAAGC,SAA3B,CAHoD,CAIpD;;AACA,QAAIH,KAAK,IAAII,KAAT,IAAkBJ,KAAK,IAAI,CAACE,QAAhC,EAA0C;AACtCC,MAAAA,SAAS,IAAG,CAAC,CAAb;AACAH,MAAAA,KAAK,IAAIE,QAAQ,GAAGC,SAApB;AACAF,MAAAA,KAAK,IAAIC,QAAT;AACH;AACJ;;AAEClB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,MAAM,GAAGlB,SAAS,CAACmB,OAAzB;AACA,UAAMC,OAAO,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAhB,CAFc,CAGd;;AACApB,IAAAA,IAAI,CAACmB,OAAD,CAAJ,CAJc,CAKd;AACA;AACD,GAPQ,EAON,CAACnB,IAAD,CAPM,CAAT;AASA,sBAAO;AAAQ,IAAA,GAAG,EAAED,SAAb;AAAA,OAA4BD;AAA5B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAlCD;;GAAMD,M;;KAAAA,M;AAoCN,eAAeA,MAAf","sourcesContent":["import React, { useRef, useEffect } from 'react'\n\nconst Canvas = props => {\n  \n  const canvasRef = useRef([])\n\n  const draw = ctx => {\n    ctx.fillStyle = '#000000'\n    ctx.beginPath()\n    ctx.arc(50, 100, 20, 0, 2*Math.PI)\n    ctx.fillStyle = '#00000'\n    ctx.fill()\n  }\n\n  for (let index = 0; index < numRow * numRow; index++) {\n    // add each tile to the array\n    board.push({xAxis, yAxis, tileSize, index});\n    xAxis = xAxis + tileSize * direction;\n    // reverse direction after 10th tile and move up 1 tile\n    if (xAxis >= width || xAxis <= -tileSize) {\n        direction*= -1;\n        xAxis += tileSize * direction;\n        yAxis -= tileSize\n    }\n}\n\n  useEffect(() => {\n    const canvas = canvasRef.current\n    const context = canvas.getContext('2d')\n    //Our first draw\n    draw(context)\n    // context.fillStyle = '#ebebeb'\n    // context.fillRect(0, 0, context.canvas.width, context.canvas.height)\n  }, [draw])\n  \n  return <canvas ref={canvasRef} {...props}/>\n}\n\nexport default Canvas"]},"metadata":{},"sourceType":"module"}