{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/week_08/project_two/SnakesAndLadders/client/src/containers/game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport GameBoard from '../components/GameBoard';\nimport Players from '../components/Players';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Game = () => {\n  _s();\n\n  // const [tasks, setTasks] = useState([])\n  // const [users, setUsers] = useState([])\n  const [roll, setRoll] = useState(0);\n  const [playerCounter, setPlayerCounter] = useState(0);\n  const [livePlayer, setLivePlayer] = useState({}); //make this as state\n  // const [playerRoll, setPlayerRoll] = useState();\n\n  const boardSize = 750;\n  const tiles = 10;\n  const tileSize = 75;\n  let yAxis = (tiles - 1) * tileSize;\n  let xAxis = 0;\n  let board = [];\n  let direction = 1;\n  let players = [];\n\n  for (let index = 0; index < tiles * tiles; index++) {\n    // add each tile to the array\n    board.push({\n      xAxis,\n      yAxis,\n      tileSize,\n      index\n    });\n    xAxis = xAxis + tileSize * direction; // reverse direction after 10th tile and move up 1 tile\n\n    if (xAxis >= boardSize || xAxis <= -tileSize) {\n      direction *= -1;\n      xAxis += tileSize * direction;\n      yAxis -= tileSize;\n    }\n  }\n\n  useEffect(() => {// startGame()\n  }); // const startGame = () => {\n  // let player_1 = {\n  //     xAxis: board[roll].xAxis,\n  //     yAxis: board[roll].yAxis,\n  //     index: 1 \n  // }\n  // players.push(player_1)\n  // let player_2 = {\n  //     xAxis: board[roll].xAxis,\n  //     yAxis: board[roll].yAxis,\n  //     index: 2\n  // }\n  // players.push(player_2)\n  // let player_3 = {\n  //     xAxis: board[roll].xAxis,\n  //     yAxis: board[roll].yAxis,\n  //     index: 3\n  // }\n  // players.push(player_3)\n  // let player_4 = {\n  //     xAxis: board[roll].xAxis,\n  //     yAxis: board[roll].yAxis,\n  //     index: 4\n  // }\n  // players.push(player_4)\n  // }\n\n  const rollDice = () => {\n    setLivePlayer(players[playerCounter]);\n    const max = 6;\n    let updateRoll = roll;\n    let newroll = Math.ceil(Math.random() * max); // add if statement to stop player going past square 100\n\n    updateRoll += newroll;\n    setRoll(updateRoll);\n    updatePlayer();\n    changePlayer();\n  };\n\n  const updatePlayer = () => {\n    console.log(livePlayer.xAxis);\n    livePlayer.xAxis = board[roll].xAxis;\n    livePlayer.yAxis = board[roll].yAxis;\n  };\n\n  const changePlayer = () => {\n    let counter = playerCounter;\n\n    if (counter === 3) {\n      counter = 0;\n      setPlayerCounter(counter);\n    } else {\n      counter += 1;\n      setPlayerCounter(counter);\n    }\n\n    setLivePlayer(players[playerCounter]);\n  }; // const getTasks = () => {\n  //     fetch('http://localhost:5000/tasks')\n  //         .then(res => res.json())\n  //         .then(tasks => setTasks(tasks))\n  // }\n  // const postUser = (data) => {\n  //     return fetch('http://localhost:5000/USERS', {\n  //         method: 'POST',\n  //         body: JSON.stringify(data),\n  //         headers: { 'Content-Type': 'application/json' }\n  //     })\n  //     .then(res => res.json())\n  // }\n  // const addUser = (user) => {\n  //     const tempUser = users.map(user => user);\n  //     tempUser.push(user);\n  //     setUsers(tempUser);\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: rollDice,\n        children: \"Roll Dice\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(GameBoard, {\n        board: board\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Players, {\n        players: players\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Game, \"vFZwXX+R7ovmrsVRFXof4/IqteM=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/john/codeclan_work/week_08/project_two/SnakesAndLadders/client/src/containers/game.js"],"names":["React","useState","useEffect","GameBoard","Players","Game","roll","setRoll","playerCounter","setPlayerCounter","livePlayer","setLivePlayer","boardSize","tiles","tileSize","yAxis","xAxis","board","direction","players","index","push","rollDice","max","updateRoll","newroll","Math","ceil","random","updatePlayer","changePlayer","console","log","counter"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport GameBoard from '../components/GameBoard';\nimport Players from '../components/Players'\n\nconst Game = () => {\n\n    // const [tasks, setTasks] = useState([])\n    // const [users, setUsers] = useState([])\n    const [roll, setRoll] = useState(0)\n    const [playerCounter, setPlayerCounter] = useState(0)\n    const [livePlayer, setLivePlayer] = useState({}) //make this as state\n    // const [playerRoll, setPlayerRoll] = useState();\n\n    const boardSize = 750;\n    const tiles = 10;\n    const tileSize = 75;\n    let yAxis = (tiles - 1) * tileSize;\n    let xAxis = 0;\n    let board = [];\n    let direction = 1;\n    let players = []\n    \n    for (let index = 0; index < tiles * tiles; index++) {\n        // add each tile to the array\n        board.push({ xAxis, yAxis, tileSize, index });\n        xAxis = xAxis + tileSize * direction;\n        // reverse direction after 10th tile and move up 1 tile\n        if (xAxis >= boardSize || xAxis <= -tileSize) {\n            direction *= -1;\n            xAxis += tileSize * direction;\n            yAxis -= tileSize\n        }\n    }\n\n    useEffect(() => {\n        // startGame()\n    },)\n\n    // const startGame = () => {\n        // let player_1 = {\n        //     xAxis: board[roll].xAxis,\n        //     yAxis: board[roll].yAxis,\n        //     index: 1 \n        // }\n        // players.push(player_1)\n    \n        // let player_2 = {\n        //     xAxis: board[roll].xAxis,\n        //     yAxis: board[roll].yAxis,\n        //     index: 2\n        // }\n        // players.push(player_2)\n    \n        // let player_3 = {\n        //     xAxis: board[roll].xAxis,\n        //     yAxis: board[roll].yAxis,\n        //     index: 3\n        // }\n        // players.push(player_3)\n    \n        // let player_4 = {\n        //     xAxis: board[roll].xAxis,\n        //     yAxis: board[roll].yAxis,\n        //     index: 4\n        // }\n        // players.push(player_4)\n\n        \n    // }\n    \n    const rollDice = () => {\n        setLivePlayer(players[playerCounter])\n        const max = 6\n        let updateRoll = roll\n        let newroll = Math.ceil(Math.random() * max);\n\n        // add if statement to stop player going past square 100\n\n        updateRoll += newroll\n        setRoll(updateRoll)\n        updatePlayer()\n        changePlayer()\n    }\n\n    const updatePlayer = () => {\n        console.log(livePlayer.xAxis)\n        livePlayer.xAxis = board[roll].xAxis\n        livePlayer.yAxis = board[roll].yAxis\n    }\n\n    const changePlayer = () => {\n        let counter = playerCounter\n        if (counter === 3) {\n            counter = 0\n            setPlayerCounter(counter)\n        } else {\n            counter += 1\n            setPlayerCounter(counter)\n        }\n        setLivePlayer(players[playerCounter])\n    }\n\n    // const getTasks = () => {\n    //     fetch('http://localhost:5000/tasks')\n    //         .then(res => res.json())\n    //         .then(tasks => setTasks(tasks))\n    // }\n\n    // const postUser = (data) => {\n    //     return fetch('http://localhost:5000/USERS', {\n    //         method: 'POST',\n    //         body: JSON.stringify(data),\n    //         headers: { 'Content-Type': 'application/json' }\n    //     })\n    //     .then(res => res.json())\n    // }\n\n    // const addUser = (user) => {\n    //     const tempUser = users.map(user => user);\n    //     tempUser.push(user);\n    //     setUsers(tempUser);\n    // }\n\n\n\n    return(\n        <>\n            <div>\n                <button onClick={rollDice} >Roll Dice</button>\n            </div>\n            <div>\n                <GameBoard board={board} />\n                <Players players={players}/>\n            </div>\n            \n            {/* <p>Player rolls a: {playerRoll}</p> */}\n        </>\n    )\n\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}