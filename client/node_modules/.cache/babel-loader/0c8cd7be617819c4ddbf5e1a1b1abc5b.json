{"ast":null,"code":"import { glob } from './Global.js';\nimport { Util } from './Util.js';\n\nvar now = function () {\n  if (glob.performance && glob.performance.now) {\n    return function () {\n      return glob.performance.now();\n    };\n  }\n\n  return function () {\n    return new Date().getTime();\n  };\n}();\n\nexport class Animation {\n  constructor(func, layers) {\n    this.id = Animation.animIdCounter++;\n    this.frame = {\n      time: 0,\n      timeDiff: 0,\n      lastTime: now(),\n      frameRate: 0\n    };\n    this.func = func;\n    this.setLayers(layers);\n  }\n\n  setLayers(layers) {\n    var lays = [];\n\n    if (!layers) {\n      lays = [];\n    } else if (layers.length > 0) {\n      lays = layers;\n    } else {\n      lays = [layers];\n    }\n\n    this.layers = lays;\n    return this;\n  }\n\n  getLayers() {\n    return this.layers;\n  }\n\n  addLayer(layer) {\n    var layers = this.layers,\n        len = layers.length,\n        n;\n\n    for (n = 0; n < len; n++) {\n      if (layers[n]._id === layer._id) {\n        return false;\n      }\n    }\n\n    this.layers.push(layer);\n    return true;\n  }\n\n  isRunning() {\n    var a = Animation,\n        animations = a.animations,\n        len = animations.length,\n        n;\n\n    for (n = 0; n < len; n++) {\n      if (animations[n].id === this.id) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  start() {\n    this.stop();\n    this.frame.timeDiff = 0;\n    this.frame.lastTime = now();\n\n    Animation._addAnimation(this);\n\n    return this;\n  }\n\n  stop() {\n    Animation._removeAnimation(this);\n\n    return this;\n  }\n\n  _updateFrameObject(time) {\n    this.frame.timeDiff = time - this.frame.lastTime;\n    this.frame.lastTime = time;\n    this.frame.time += this.frame.timeDiff;\n    this.frame.frameRate = 1000 / this.frame.timeDiff;\n  }\n\n  static _addAnimation(anim) {\n    this.animations.push(anim);\n\n    this._handleAnimation();\n  }\n\n  static _removeAnimation(anim) {\n    var id = anim.id,\n        animations = this.animations,\n        len = animations.length,\n        n;\n\n    for (n = 0; n < len; n++) {\n      if (animations[n].id === id) {\n        this.animations.splice(n, 1);\n        break;\n      }\n    }\n  }\n\n  static _runFrames() {\n    var layerHash = {},\n        animations = this.animations,\n        anim,\n        layers,\n        func,\n        n,\n        i,\n        layersLen,\n        layer,\n        key,\n        needRedraw;\n\n    for (n = 0; n < animations.length; n++) {\n      anim = animations[n];\n      layers = anim.layers;\n      func = anim.func;\n\n      anim._updateFrameObject(now());\n\n      layersLen = layers.length;\n\n      if (func) {\n        needRedraw = func.call(anim, anim.frame) !== false;\n      } else {\n        needRedraw = true;\n      }\n\n      if (!needRedraw) {\n        continue;\n      }\n\n      for (i = 0; i < layersLen; i++) {\n        layer = layers[i];\n\n        if (layer._id !== undefined) {\n          layerHash[layer._id] = layer;\n        }\n      }\n    }\n\n    for (key in layerHash) {\n      if (!layerHash.hasOwnProperty(key)) {\n        continue;\n      }\n\n      layerHash[key].batchDraw();\n    }\n  }\n\n  static _animationLoop() {\n    var Anim = Animation;\n\n    if (Anim.animations.length) {\n      Anim._runFrames();\n\n      Util.requestAnimFrame(Anim._animationLoop);\n    } else {\n      Anim.animRunning = false;\n    }\n  }\n\n  static _handleAnimation() {\n    if (!this.animRunning) {\n      this.animRunning = true;\n      Util.requestAnimFrame(this._animationLoop);\n    }\n  }\n\n}\nAnimation.animations = [];\nAnimation.animIdCounter = 0;\nAnimation.animRunning = false;","map":{"version":3,"sources":["/Users/stevec/Codeclan_Work/Group_Project/SnakesAndLadders/client/node_modules/konva/lib/Animation.js"],"names":["glob","Util","now","performance","Date","getTime","Animation","constructor","func","layers","id","animIdCounter","frame","time","timeDiff","lastTime","frameRate","setLayers","lays","length","getLayers","addLayer","layer","len","n","_id","push","isRunning","a","animations","start","stop","_addAnimation","_removeAnimation","_updateFrameObject","anim","_handleAnimation","splice","_runFrames","layerHash","i","layersLen","key","needRedraw","call","undefined","hasOwnProperty","batchDraw","_animationLoop","Anim","requestAnimFrame","animRunning"],"mappings":"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","sourcesContent":["import { glob } from './Global.js';\nimport { Util } from './Util.js';\nvar now = (function () {\n    if (glob.performance && glob.performance.now) {\n        return function () {\n            return glob.performance.now();\n        };\n    }\n    return function () {\n        return new Date().getTime();\n    };\n})();\nexport class Animation {\n    constructor(func, layers) {\n        this.id = Animation.animIdCounter++;\n        this.frame = {\n            time: 0,\n            timeDiff: 0,\n            lastTime: now(),\n            frameRate: 0,\n        };\n        this.func = func;\n        this.setLayers(layers);\n    }\n    setLayers(layers) {\n        var lays = [];\n        if (!layers) {\n            lays = [];\n        }\n        else if (layers.length > 0) {\n            lays = layers;\n        }\n        else {\n            lays = [layers];\n        }\n        this.layers = lays;\n        return this;\n    }\n    getLayers() {\n        return this.layers;\n    }\n    addLayer(layer) {\n        var layers = this.layers, len = layers.length, n;\n        for (n = 0; n < len; n++) {\n            if (layers[n]._id === layer._id) {\n                return false;\n            }\n        }\n        this.layers.push(layer);\n        return true;\n    }\n    isRunning() {\n        var a = Animation, animations = a.animations, len = animations.length, n;\n        for (n = 0; n < len; n++) {\n            if (animations[n].id === this.id) {\n                return true;\n            }\n        }\n        return false;\n    }\n    start() {\n        this.stop();\n        this.frame.timeDiff = 0;\n        this.frame.lastTime = now();\n        Animation._addAnimation(this);\n        return this;\n    }\n    stop() {\n        Animation._removeAnimation(this);\n        return this;\n    }\n    _updateFrameObject(time) {\n        this.frame.timeDiff = time - this.frame.lastTime;\n        this.frame.lastTime = time;\n        this.frame.time += this.frame.timeDiff;\n        this.frame.frameRate = 1000 / this.frame.timeDiff;\n    }\n    static _addAnimation(anim) {\n        this.animations.push(anim);\n        this._handleAnimation();\n    }\n    static _removeAnimation(anim) {\n        var id = anim.id, animations = this.animations, len = animations.length, n;\n        for (n = 0; n < len; n++) {\n            if (animations[n].id === id) {\n                this.animations.splice(n, 1);\n                break;\n            }\n        }\n    }\n    static _runFrames() {\n        var layerHash = {}, animations = this.animations, anim, layers, func, n, i, layersLen, layer, key, needRedraw;\n        for (n = 0; n < animations.length; n++) {\n            anim = animations[n];\n            layers = anim.layers;\n            func = anim.func;\n            anim._updateFrameObject(now());\n            layersLen = layers.length;\n            if (func) {\n                needRedraw = func.call(anim, anim.frame) !== false;\n            }\n            else {\n                needRedraw = true;\n            }\n            if (!needRedraw) {\n                continue;\n            }\n            for (i = 0; i < layersLen; i++) {\n                layer = layers[i];\n                if (layer._id !== undefined) {\n                    layerHash[layer._id] = layer;\n                }\n            }\n        }\n        for (key in layerHash) {\n            if (!layerHash.hasOwnProperty(key)) {\n                continue;\n            }\n            layerHash[key].batchDraw();\n        }\n    }\n    static _animationLoop() {\n        var Anim = Animation;\n        if (Anim.animations.length) {\n            Anim._runFrames();\n            Util.requestAnimFrame(Anim._animationLoop);\n        }\n        else {\n            Anim.animRunning = false;\n        }\n    }\n    static _handleAnimation() {\n        if (!this.animRunning) {\n            this.animRunning = true;\n            Util.requestAnimFrame(this._animationLoop);\n        }\n    }\n}\nAnimation.animations = [];\nAnimation.animIdCounter = 0;\nAnimation.animRunning = false;\n"]},"metadata":{},"sourceType":"module"}