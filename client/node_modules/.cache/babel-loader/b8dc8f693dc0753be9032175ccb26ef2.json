{"ast":null,"code":"var _jsxFileName = \"/Users/stevec/Codeclan_Work/Group_Project/SnakesAndLadders/client/src/components/GameBoard.js\",\n    _s2 = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GameBoard = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    draw(context);\n  }, [draw]);\n  const width = 500;\n  const height = 500;\n  const numCol = 10;\n  const numRow = 10;\n  const tileSize = 50;\n  let yAxis = (numRow - 1) * tileSize;\n  let xAxis = 0;\n  let board = [];\n  let direction = 1;\n\n  for (let index = 0; index < numRow * numRow; index++) {\n    board.push({\n      xAxis,\n      yAxis,\n      tileSize,\n      index\n    });\n    xAxis = xAxis + tileSize * direction;\n\n    if (xAxis >= width || xAxis <= -tileSize) {\n      direction *= -1;\n      xAxis += tileSize * direction;\n      yAxis -= tileSize;\n    }\n  }\n\n  console.log(board);\n\n  const canvas = props => {\n    _s();\n\n    const canvasRef = useEffect(null);\n\n    const draw = ctx => {\n      board.forEach(tile => {\n        ctx.beginPath();\n        ctx.rect(xAxis, yAxis, tileSize, tileSize);\n        ctx.stroke();\n      });\n    };\n  };\n\n  _s(canvas, \"HH+VxMF5lEx/kYnfPlRYt/8Jh3E=\");\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(GameBoard, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = GameBoard;\nexport default GameBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"sources":["/Users/stevec/Codeclan_Work/Group_Project/SnakesAndLadders/client/src/components/GameBoard.js"],"names":["useEffect","GameBoard","canvas","canvasRef","current","context","getContext","draw","width","height","numCol","numRow","tileSize","yAxis","xAxis","board","direction","index","push","console","log","props","ctx","forEach","tile","beginPath","rect","stroke"],"mappings":";;;AACA,SAAQA,SAAR,QAAwB,OAAxB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAAA;;AAEpBD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAME,MAAM,GAAGC,SAAS,CAACC,OAAzB;AACA,UAAMC,OAAO,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAhB;AACAC,IAAAA,IAAI,CAACF,OAAD,CAAJ;AACH,GAJQ,EAIN,CAACE,IAAD,CAJM,CAAT;AAMA,QAAMC,KAAK,GAAG,GAAd;AACA,QAAMC,MAAM,GAAG,GAAf;AACA,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,QAAQ,GAAG,EAAjB;AACA,MAAIC,KAAK,GAAG,CAACF,MAAM,GAAE,CAAT,IAAeC,QAA3B;AACA,MAAIE,KAAK,GAAG,CAAZ;AACA,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,SAAS,GAAG,CAAhB;;AAEA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGN,MAAM,GAAGA,MAArC,EAA6CM,KAAK,EAAlD,EAAsD;AAClDF,IAAAA,KAAK,CAACG,IAAN,CAAW;AAACJ,MAAAA,KAAD;AAAQD,MAAAA,KAAR;AAAeD,MAAAA,QAAf;AAAyBK,MAAAA;AAAzB,KAAX;AACAH,IAAAA,KAAK,GAAGA,KAAK,GAAGF,QAAQ,GAAGI,SAA3B;;AACA,QAAIF,KAAK,IAAIN,KAAT,IAAkBM,KAAK,IAAI,CAACF,QAAhC,EAA0C;AACtCI,MAAAA,SAAS,IAAG,CAAC,CAAb;AACAF,MAAAA,KAAK,IAAIF,QAAQ,GAAGI,SAApB;AACAH,MAAAA,KAAK,IAAID,QAAT;AACH;AACJ;;AACDO,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;;AAEA,QAAMb,MAAM,GAAGmB,KAAK,IAAI;AAAA;;AACpB,UAAMlB,SAAS,GAAGH,SAAS,CAAC,IAAD,CAA3B;;AACA,UAAMO,IAAI,GAAGe,GAAG,IAAI;AAChBP,MAAAA,KAAK,CAACQ,OAAN,CAAcC,IAAI,IAAI;AAClBF,QAAAA,GAAG,CAACG,SAAJ;AACAH,QAAAA,GAAG,CAACI,IAAJ,CAASZ,KAAT,EAAgBD,KAAhB,EAAuBD,QAAvB,EAAiCA,QAAjC;AACAU,QAAAA,GAAG,CAACK,MAAJ;AACH,OAJD;AAKH,KAND;AAOH,GATD;;AA7BoB,KA6BdzB,MA7Bc;;AAwCpB,sBACI;AAAQ,IAAA,GAAG,EAAEC,SAAb;AAAA,OAA4BkB;AAA5B;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CA3CD;;IAAMpB,S;;KAAAA,S;AA6CN,eAAeA,SAAf","sourcesContent":["\nimport {useEffect} from \"react\"\n\nconst GameBoard = () => {\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const context = canvas.getContext('2d');\n        draw(context)\n    }, [draw])\n\n    const width = 500;\n    const height = 500;\n    const numCol = 10;\n    const numRow = 10;\n    const tileSize = 50;\n    let yAxis = (numRow -1 ) * tileSize;\n    let xAxis = 0;\n    let board = [];\n    let direction = 1;\n\n    for (let index = 0; index < numRow * numRow; index++) {\n        board.push({xAxis, yAxis, tileSize, index});\n        xAxis = xAxis + tileSize * direction;\n        if (xAxis >= width || xAxis <= -tileSize) {\n            direction*= -1;\n            xAxis += tileSize * direction;\n            yAxis -= tileSize\n        }\n    }\n    console.log(board)\n\n    const canvas = props => {\n        const canvasRef = useEffect(null);\n        const draw = ctx => {\n            board.forEach(tile => {\n                ctx.beginPath();\n                ctx.rect(xAxis, yAxis, tileSize, tileSize);\n                ctx.stroke();\n            })\n        }\n    }\n\n    return (\n        <canvas ref={canvasRef} {...props}/>\n    )\n}\n\nexport default GameBoard;"]},"metadata":{},"sourceType":"module"}