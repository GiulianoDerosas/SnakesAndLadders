{"ast":null,"code":"import { Factory } from '../Factory.js';\nimport { Node } from '../Node.js';\nimport { getNumberValidator } from '../Validators.js';\nexport const Noise = function (imageData) {\n  var amount = this.noise() * 255,\n      data = imageData.data,\n      nPixels = data.length,\n      half = amount / 2,\n      i;\n\n  for (i = 0; i < nPixels; i += 4) {\n    data[i + 0] += half - 2 * half * Math.random();\n    data[i + 1] += half - 2 * half * Math.random();\n    data[i + 2] += half - 2 * half * Math.random();\n  }\n};\nFactory.addGetterSetter(Node, 'noise', 0.2, getNumberValidator(), Factory.afterSetFilter);","map":{"version":3,"sources":["/Users/stevec/Codeclan_Work/Group_Project/SnakesAndLadders/client/node_modules/konva/lib/filters/Noise.js"],"names":["Factory","Node","getNumberValidator","Noise","imageData","amount","noise","data","nPixels","length","half","i","Math","random","addGetterSetter","afterSetFilter"],"mappings":"AAAA,SAASA,OAAT,QAAwB,eAAxB;AACA,SAASC,IAAT,QAAqB,YAArB;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AACA,OAAO,MAAMC,KAAK,GAAG,UAAUC,SAAV,EAAqB;AACtC,MAAIC,MAAM,GAAG,KAAKC,KAAL,KAAe,GAA5B;AAAA,MAAiCC,IAAI,GAAGH,SAAS,CAACG,IAAlD;AAAA,MAAwDC,OAAO,GAAGD,IAAI,CAACE,MAAvE;AAAA,MAA+EC,IAAI,GAAGL,MAAM,GAAG,CAA/F;AAAA,MAAkGM,CAAlG;;AACA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,OAAhB,EAAyBG,CAAC,IAAI,CAA9B,EAAiC;AAC7BJ,IAAAA,IAAI,CAACI,CAAC,GAAG,CAAL,CAAJ,IAAeD,IAAI,GAAG,IAAIA,IAAJ,GAAWE,IAAI,CAACC,MAAL,EAAjC;AACAN,IAAAA,IAAI,CAACI,CAAC,GAAG,CAAL,CAAJ,IAAeD,IAAI,GAAG,IAAIA,IAAJ,GAAWE,IAAI,CAACC,MAAL,EAAjC;AACAN,IAAAA,IAAI,CAACI,CAAC,GAAG,CAAL,CAAJ,IAAeD,IAAI,GAAG,IAAIA,IAAJ,GAAWE,IAAI,CAACC,MAAL,EAAjC;AACH;AACJ,CAPM;AAQPb,OAAO,CAACc,eAAR,CAAwBb,IAAxB,EAA8B,OAA9B,EAAuC,GAAvC,EAA4CC,kBAAkB,EAA9D,EAAkEF,OAAO,CAACe,cAA1E","sourcesContent":["import { Factory } from '../Factory.js';\nimport { Node } from '../Node.js';\nimport { getNumberValidator } from '../Validators.js';\nexport const Noise = function (imageData) {\n    var amount = this.noise() * 255, data = imageData.data, nPixels = data.length, half = amount / 2, i;\n    for (i = 0; i < nPixels; i += 4) {\n        data[i + 0] += half - 2 * half * Math.random();\n        data[i + 1] += half - 2 * half * Math.random();\n        data[i + 2] += half - 2 * half * Math.random();\n    }\n};\nFactory.addGetterSetter(Node, 'noise', 0.2, getNumberValidator(), Factory.afterSetFilter);\n"]},"metadata":{},"sourceType":"module"}