{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/week_08/project_two/SnakesAndLadders/client/src/containers/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport GameBoard from '../components/GameBoard';\nimport Players from '../components/Players';\nimport Dice from '../components/Dice';\nimport PlayerForm from '../components/PlayerForm';\nimport PlayerList from '../components/PlayerList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Game = () => {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [players, setPlayers] = useState([]);\n  const [roll, setRoll] = useState(0);\n  const [playerCounter, setPlayerCounter] = useState(0);\n  const [livePlayer, setLivePlayer] = useState({});\n  const boardSize = 750;\n  const tiles = 10;\n  const tileSize = 75;\n  let yAxis = (tiles - 1) * tileSize;\n  let xAxis = 0;\n  let board = [];\n  let direction = 1;\n\n  for (let index = 0; index < tiles * tiles; index++) {\n    // add each tile to the array\n    board.push({\n      xAxis,\n      yAxis,\n      tileSize,\n      index\n    });\n    xAxis = xAxis + tileSize * direction; // reverse direction after 10th tile and move up 1 tile\n\n    if (xAxis >= boardSize || xAxis <= -tileSize) {\n      direction *= -1;\n      xAxis += tileSize * direction;\n      yAxis -= tileSize;\n    }\n  } // const startGame = () => {\n  //     const initPlayers = []\n  //     let player_1 = {\n  //         xAxis: board[roll].xAxis,\n  //         yAxis: board[roll].yAxis,\n  //         index: 1 \n  //     }\n  //     initPlayers.push(player_1)\n  //     let player_2 = {\n  //         xAxis: board[roll].xAxis,\n  //         yAxis: board[roll].yAxis,\n  //         index: 2\n  //     }\n  //     initPlayers.push(player_2)\n  //     let player_3 = {\n  //         xAxis: board[roll].xAxis,\n  //         yAxis: board[roll].yAxis,\n  //         index: 3\n  //     }\n  //     initPlayers.push(player_3)\n  //     let player_4 = {\n  //         xAxis: board[roll].xAxis,\n  //         yAxis: board[roll].yAxis,\n  //         index: 4\n  //     }\n  //     initPlayers.push(player_4)\n  //     setPlayers(initPlayers)\n  // }\n\n\n  const rollDice = () => {\n    setLivePlayer(players[playerCounter]);\n    const max = 6;\n    let updateRoll = roll;\n    let newroll = Math.ceil(Math.random() * max); // add if statement to stop player going past square 100\n\n    updateRoll += newroll;\n    setRoll(updateRoll);\n    updatePlayer();\n    changePlayer();\n  };\n\n  const updatePlayer = () => {\n    console.log(livePlayer.xAxis);\n    let tempPlayer = livePlayer;\n    tempPlayer.xAxis = board[roll].xAxis;\n    tempPlayer.yAxis = board[roll].yAxis;\n    setLivePlayer(tempPlayer);\n  };\n\n  const changePlayer = () => {\n    let counter = playerCounter;\n\n    if (counter === 3) {\n      counter = 0;\n      setPlayerCounter(counter);\n    } else {\n      counter += 1;\n      setPlayerCounter(counter);\n    }\n\n    setLivePlayer(players[playerCounter]);\n  };\n\n  const getTasks = () => {\n    fetch('http://localhost:5000/tasks').then(res => res.json()).then(tasks => setTasks(tasks));\n  };\n\n  console.log(players);\n  console.log(board);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(GameBoard, {\n        board: board\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dice-form\",\n      children: [/*#__PURE__*/_jsxDEV(Dice, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PlayerForm, {\n        addPlayer: addPlayer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(PlayerList, {\n        players: players\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Game, \"qimwpjiJZg/ZrU7ceEMQtjA8IMs=\");\n\n_c = Game;\nexport default Game; // for (let index = 1; index < 4; index ++){\n//     initPlayers.push({xAxis, yAxis, index})\n//     xAxis = board[roll].xAxis\n//     yAxis = board[roll].yAxis\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/john/codeclan_work/week_08/project_two/SnakesAndLadders/client/src/containers/Game.js"],"names":["React","useState","useEffect","GameBoard","Players","Dice","PlayerForm","PlayerList","Game","tasks","setTasks","users","setUsers","players","setPlayers","roll","setRoll","playerCounter","setPlayerCounter","livePlayer","setLivePlayer","boardSize","tiles","tileSize","yAxis","xAxis","board","direction","index","push","rollDice","max","updateRoll","newroll","Math","ceil","random","updatePlayer","changePlayer","console","log","tempPlayer","counter","getTasks","fetch","then","res","json","addPlayer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport GameBoard from '../components/GameBoard';\nimport Players from '../components/Players';\nimport Dice from '../components/Dice';\nimport PlayerForm from '../components/PlayerForm';\nimport PlayerList from '../components/PlayerList';\n\nconst Game = () => {\n    const [tasks, setTasks] = useState([])\n    const [users, setUsers] = useState([])\n    const [players, setPlayers] = useState([])\n    const [roll, setRoll] = useState(0)\n    const [playerCounter, setPlayerCounter] = useState(0)\n    const [livePlayer, setLivePlayer] = useState({})\n\n    const boardSize = 750;\n    const tiles = 10;\n    const tileSize = 75;\n    let yAxis = (tiles - 1) * tileSize;\n    let xAxis = 0;\n    let board = [];\n    let direction = 1;\n\n    for (let index = 0; index < tiles * tiles; index++) {\n        // add each tile to the array\n        board.push({ xAxis, yAxis, tileSize, index });\n        xAxis = xAxis + tileSize * direction;\n        // reverse direction after 10th tile and move up 1 tile\n        if (xAxis >= boardSize || xAxis <= -tileSize) {\n            direction *= -1;\n            xAxis += tileSize * direction;\n            yAxis -= tileSize\n        }\n    }\n\n    // const startGame = () => {\n\n    //     const initPlayers = []\n\n    //     let player_1 = {\n    //         xAxis: board[roll].xAxis,\n    //         yAxis: board[roll].yAxis,\n    //         index: 1 \n    //     }\n    //     initPlayers.push(player_1)\n\n    //     let player_2 = {\n    //         xAxis: board[roll].xAxis,\n    //         yAxis: board[roll].yAxis,\n    //         index: 2\n    //     }\n    //     initPlayers.push(player_2)\n\n    //     let player_3 = {\n    //         xAxis: board[roll].xAxis,\n    //         yAxis: board[roll].yAxis,\n    //         index: 3\n    //     }\n    //     initPlayers.push(player_3)\n\n    //     let player_4 = {\n    //         xAxis: board[roll].xAxis,\n    //         yAxis: board[roll].yAxis,\n    //         index: 4\n    //     }\n    //     initPlayers.push(player_4)\n    //     setPlayers(initPlayers)\n    // }\n\n\n\n    const rollDice = () => {\n        setLivePlayer(players[playerCounter])\n        const max = 6\n        let updateRoll = roll\n        let newroll = Math.ceil(Math.random() * max);\n\n        // add if statement to stop player going past square 100\n\n        updateRoll += newroll\n        setRoll(updateRoll)\n        updatePlayer()\n        changePlayer()\n    }\n\n    const updatePlayer = () => {\n        console.log(livePlayer.xAxis)\n        let tempPlayer = livePlayer\n        tempPlayer.xAxis = board[roll].xAxis\n        tempPlayer.yAxis = board[roll].yAxis\n        setLivePlayer(tempPlayer)\n    }\n\n    const changePlayer = () => {\n        let counter = playerCounter\n        if (counter === 3) {\n            counter = 0\n            setPlayerCounter(counter)\n        } else {\n            counter += 1\n            setPlayerCounter(counter)\n        }\n        setLivePlayer(players[playerCounter])\n    }\n\n      const getTasks = () => {\n        fetch('http://localhost:5000/tasks')\n            .then(res => res.json())\n            .then(tasks => setTasks(tasks))\n    }\n\n    console.log(players)\n    console.log(board)\n\n    return (\n        <>\n            <div>\n                <GameBoard board={board} />\n                {/* <Players players={players} /> */}\n            </div>\n\n            <div className=\"dice-form\">\n            <Dice/>\n            <PlayerForm addPlayer={addPlayer}/>\n            </div>\n\n            <div>\n            <PlayerList players={players}/>\n            </div>\n        </>\n    )\n\n}\n\nexport default Game;\n\n// for (let index = 1; index < 4; index ++){\n//     initPlayers.push({xAxis, yAxis, index})\n//     xAxis = board[roll].xAxis\n//     yAxis = board[roll].yAxis\n// }"]},"metadata":{},"sourceType":"module"}